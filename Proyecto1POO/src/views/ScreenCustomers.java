/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;

import Classes.bill_class;
import Classes.customer_class;
import Classes.id_class;
import Classes.main_class;
import Classes.maintenance_class;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.swing.JPanel;
import java.util.Date;
import java.util.Dictionary;
import java.util.Hashtable;
import javax.swing.JOptionPane;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 * The jPanel screen to show information and actions to the user about customers.
 * @author josem
 */
public class ScreenCustomers extends javax.swing.JPanel {

    /**
     * Creates new form ScreenCustomers
     */
    public ScreenCustomers() {
        initComponents();
        showTable();
        initializeCustomers();
        LoadBilling();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CustomersView = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        CustomersWindowTitle = new javax.swing.JLabel();
        CustomersWindowSubtitle = new javax.swing.JLabel();
        AddCustomerButton = new javax.swing.JButton();
        SearchCustomerButton = new javax.swing.JButton();
        DeleteCustomerButton = new javax.swing.JButton();
        ModifyCustomerButton = new javax.swing.JButton();
        CustomerIdLabel = new javax.swing.JLabel();
        CustomerIdText = new javax.swing.JTextField();
        CustomerNameLabel = new javax.swing.JLabel();
        CustomerNameText = new javax.swing.JTextField();
        CustomerLastnameLabel = new javax.swing.JLabel();
        CustomerLastnameText = new javax.swing.JTextField();
        CustomerPhoneLabel = new javax.swing.JLabel();
        CustomerPhoneText = new javax.swing.JTextField();
        CustomerMailLabel = new javax.swing.JLabel();
        CustomerMailText = new javax.swing.JTextField();
        CustomerProvinceLabel = new javax.swing.JLabel();
        CustomerCantonLabel = new javax.swing.JLabel();
        CustomerCantonText = new javax.swing.JTextField();
        CustomerDistrictLabel = new javax.swing.JLabel();
        CustomerDistrictText = new javax.swing.JTextField();
        CustomerBirthdateLabel = new javax.swing.JLabel();
        AcceptCustomerButton = new javax.swing.JButton();
        CustomerProvinceCombo = new javax.swing.JComboBox<>();
        CustomerMonthCombo = new javax.swing.JComboBox<>();
        CustomerDayText = new javax.swing.JTextField();
        CustomerYearText = new javax.swing.JTextField();
        CancelCustomerButton = new javax.swing.JButton();
        DirectoryPanelLabel = new javax.swing.JLabel();
        SearchScrollPane = new javax.swing.JScrollPane();
        SearchTable = new javax.swing.JTable();
        SearchModifyButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        CustomersView.setBackground(new java.awt.Color(255, 255, 255));
        CustomersView.setPreferredSize(new java.awt.Dimension(1030, 730));
        CustomersView.setLayout(null);

        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/SalirView.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setPreferredSize(new java.awt.Dimension(32, 32));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        CustomersView.add(jButton1);
        jButton1.setBounds(990, 10, 32, 32);

        CustomersWindowTitle.setFont(new java.awt.Font("Dubai Medium", 1, 24)); // NOI18N
        CustomersWindowTitle.setText("CUSTOMERS");
        CustomersView.add(CustomersWindowTitle);
        CustomersWindowTitle.setBounds(420, 10, 150, 42);

        CustomersWindowSubtitle.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomersWindowSubtitle.setText("Select the action to perform");
        CustomersView.add(CustomersWindowSubtitle);
        CustomersWindowSubtitle.setBounds(410, 40, 161, 24);

        AddCustomerButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        AddCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/agregar-usuario-32.png"))); // NOI18N
        AddCustomerButton.setText("Add Customer");
        AddCustomerButton.setBorder(null);
        AddCustomerButton.setContentAreaFilled(false);
        AddCustomerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddCustomerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AddCustomerButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AddCustomerButtonMouseExited(evt);
            }
        });
        AddCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCustomerButtonActionPerformed(evt);
            }
        });
        CustomersView.add(AddCustomerButton);
        AddCustomerButton.setBounds(170, 80, 140, 40);

        SearchCustomerButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        SearchCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/buscar-usuario-32.png"))); // NOI18N
        SearchCustomerButton.setText("Search Customer");
        SearchCustomerButton.setBorder(null);
        SearchCustomerButton.setContentAreaFilled(false);
        SearchCustomerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SearchCustomerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SearchCustomerButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SearchCustomerButtonMouseExited(evt);
            }
        });
        SearchCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCustomerButtonActionPerformed(evt);
            }
        });
        CustomersView.add(SearchCustomerButton);
        SearchCustomerButton.setBounds(320, 80, 150, 40);

        DeleteCustomerButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        DeleteCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/eliminar-usuario-32.png"))); // NOI18N
        DeleteCustomerButton.setText("Delete Customer");
        DeleteCustomerButton.setBorder(null);
        DeleteCustomerButton.setContentAreaFilled(false);
        DeleteCustomerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DeleteCustomerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DeleteCustomerButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DeleteCustomerButtonMouseExited(evt);
            }
        });
        DeleteCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCustomerButtonActionPerformed(evt);
            }
        });
        CustomersView.add(DeleteCustomerButton);
        DeleteCustomerButton.setBounds(640, 80, 160, 40);

        ModifyCustomerButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        ModifyCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/modificar-usuario-32.png"))); // NOI18N
        ModifyCustomerButton.setText("Modify Customer");
        ModifyCustomerButton.setBorder(null);
        ModifyCustomerButton.setContentAreaFilled(false);
        ModifyCustomerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ModifyCustomerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ModifyCustomerButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ModifyCustomerButtonMouseExited(evt);
            }
        });
        ModifyCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyCustomerButtonActionPerformed(evt);
            }
        });
        CustomersView.add(ModifyCustomerButton);
        ModifyCustomerButton.setBounds(480, 80, 150, 40);

        CustomerIdLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerIdLabel.setText("Customer Id:");
        CustomersView.add(CustomerIdLabel);
        CustomerIdLabel.setBounds(100, 150, 73, 24);

        CustomerIdText.setEnabled(false);
        CustomerIdText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerIdTextActionPerformed(evt);
            }
        });
        CustomersView.add(CustomerIdText);
        CustomerIdText.setBounds(100, 170, 350, 24);

        CustomerNameLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerNameLabel.setText("Customer Name:");
        CustomersView.add(CustomerNameLabel);
        CustomerNameLabel.setBounds(100, 200, 97, 24);

        CustomerNameText.setEnabled(false);
        CustomerNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerNameTextActionPerformed(evt);
            }
        });
        CustomersView.add(CustomerNameText);
        CustomerNameText.setBounds(100, 220, 350, 24);

        CustomerLastnameLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerLastnameLabel.setText("Customer Lastname:");
        CustomersView.add(CustomerLastnameLabel);
        CustomerLastnameLabel.setBounds(100, 250, 119, 24);

        CustomerLastnameText.setEnabled(false);
        CustomerLastnameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerLastnameTextActionPerformed(evt);
            }
        });
        CustomersView.add(CustomerLastnameText);
        CustomerLastnameText.setBounds(100, 270, 350, 24);

        CustomerPhoneLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerPhoneLabel.setText("Customer Phone:");
        CustomersView.add(CustomerPhoneLabel);
        CustomerPhoneLabel.setBounds(100, 300, 98, 24);

        CustomerPhoneText.setEnabled(false);
        CustomerPhoneText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerPhoneTextActionPerformed(evt);
            }
        });
        CustomersView.add(CustomerPhoneText);
        CustomerPhoneText.setBounds(100, 320, 350, 24);

        CustomerMailLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerMailLabel.setText("Customer eMail:");
        CustomersView.add(CustomerMailLabel);
        CustomerMailLabel.setBounds(100, 350, 94, 24);

        CustomerMailText.setEnabled(false);
        CustomerMailText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerMailTextActionPerformed(evt);
            }
        });
        CustomersView.add(CustomerMailText);
        CustomerMailText.setBounds(100, 370, 350, 24);

        CustomerProvinceLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerProvinceLabel.setText("Customer Province:");
        CustomersView.add(CustomerProvinceLabel);
        CustomerProvinceLabel.setBounds(100, 400, 111, 24);

        CustomerCantonLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerCantonLabel.setText("Customer Canton:");
        CustomersView.add(CustomerCantonLabel);
        CustomerCantonLabel.setBounds(100, 450, 103, 24);

        CustomerCantonText.setEnabled(false);
        CustomerCantonText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerCantonTextActionPerformed(evt);
            }
        });
        CustomersView.add(CustomerCantonText);
        CustomerCantonText.setBounds(100, 470, 350, 24);

        CustomerDistrictLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerDistrictLabel.setText("Customer Disctrict:");
        CustomersView.add(CustomerDistrictLabel);
        CustomerDistrictLabel.setBounds(100, 500, 110, 24);

        CustomerDistrictText.setEnabled(false);
        CustomerDistrictText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerDistrictTextActionPerformed(evt);
            }
        });
        CustomersView.add(CustomerDistrictText);
        CustomerDistrictText.setBounds(100, 520, 350, 24);

        CustomerBirthdateLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CustomerBirthdateLabel.setText("Customer Birthdate:");
        CustomersView.add(CustomerBirthdateLabel);
        CustomerBirthdateLabel.setBounds(100, 550, 116, 24);

        AcceptCustomerButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        AcceptCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/aceptar-32.png"))); // NOI18N
        AcceptCustomerButton.setText("Accept");
        AcceptCustomerButton.setBorder(null);
        AcceptCustomerButton.setContentAreaFilled(false);
        AcceptCustomerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AcceptCustomerButton.setEnabled(false);
        AcceptCustomerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AcceptCustomerButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AcceptCustomerButtonMouseExited(evt);
            }
        });
        AcceptCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcceptCustomerButtonActionPerformed(evt);
            }
        });
        CustomersView.add(AcceptCustomerButton);
        AcceptCustomerButton.setBounds(130, 630, 100, 40);

        CustomerProvinceCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alajuela", "Cartago", "Guanacaste", "Heredia", "Limon", "Puntarenas", "San Jose" }));
        CustomerProvinceCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CustomerProvinceCombo.setEnabled(false);
        CustomerProvinceCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerProvinceComboActionPerformed(evt);
            }
        });
        CustomersView.add(CustomerProvinceCombo);
        CustomerProvinceCombo.setBounds(100, 420, 350, 26);

        CustomerMonthCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        CustomerMonthCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CustomerMonthCombo.setEnabled(false);
        CustomersView.add(CustomerMonthCombo);
        CustomerMonthCombo.setBounds(180, 580, 61, 26);

        CustomerDayText.setText("01");
        CustomerDayText.setEnabled(false);
        CustomersView.add(CustomerDayText);
        CustomerDayText.setBounds(100, 580, 60, 24);

        CustomerYearText.setText("1900");
        CustomerYearText.setEnabled(false);
        CustomersView.add(CustomerYearText);
        CustomerYearText.setBounds(260, 580, 190, 24);

        CancelCustomerButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        CancelCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/cancelar-32.png"))); // NOI18N
        CancelCustomerButton.setText("Cancel");
        CancelCustomerButton.setBorder(null);
        CancelCustomerButton.setContentAreaFilled(false);
        CancelCustomerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CancelCustomerButton.setEnabled(false);
        CancelCustomerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CancelCustomerButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CancelCustomerButtonMouseExited(evt);
            }
        });
        CancelCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelCustomerButtonActionPerformed(evt);
            }
        });
        CustomersView.add(CancelCustomerButton);
        CancelCustomerButton.setBounds(230, 630, 100, 40);

        DirectoryPanelLabel.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        DirectoryPanelLabel.setText("Directory Panel:");
        CustomersView.add(DirectoryPanelLabel);
        DirectoryPanelLabel.setBounds(700, 150, 91, 24);

        SearchTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SearchTable.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        SearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Name", "Lastname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SearchTable.setEnabled(false);
        SearchScrollPane.setViewportView(SearchTable);

        CustomersView.add(SearchScrollPane);
        SearchScrollPane.setBounds(520, 170, 450, 430);

        SearchModifyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/boton_buscar-24.png"))); // NOI18N
        SearchModifyButton.setBorder(null);
        SearchModifyButton.setContentAreaFilled(false);
        SearchModifyButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SearchModifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SearchModifyButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SearchModifyButtonMouseExited(evt);
            }
        });
        SearchModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchModifyButtonActionPerformed(evt);
            }
        });
        CustomersView.add(SearchModifyButton);
        SearchModifyButton.setBounds(470, 170, 30, 30);

        ResetButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        ResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/reset-32.png"))); // NOI18N
        ResetButton.setText("Reset");
        ResetButton.setBorder(null);
        ResetButton.setContentAreaFilled(false);
        ResetButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ResetButton.setEnabled(false);
        ResetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ResetButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ResetButtonMouseExited(evt);
            }
        });
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });
        CustomersView.add(ResetButton);
        ResetButton.setBounds(320, 630, 110, 40);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Ellipse 2092.png"))); // NOI18N
        jLabel2.setText("jLabel1");
        CustomersView.add(jLabel2);
        jLabel2.setBounds(750, 540, 370, 270);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Union3.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        CustomersView.add(jLabel1);
        jLabel1.setBounds(-250, -100, 490, 470);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CustomersView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CustomersView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        borrarPanel(new ScreenProducts());
        ShowJPanel(new ScreenMain());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        // TODO add your handling code here:
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/SalirView2.png")));
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        // TODO add your handling code here:
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/SalirView.png")));
    }//GEN-LAST:event_jButton1MouseExited
   
    private void set_id(String id_mode){
        id_class id = main_class.ids.get(0);
        if(id_mode == "customer"){
           CustomerIdText.setText(String.valueOf(id.getId_customer()));
        }
    }
    private void AddCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCustomerButtonActionPerformed
        // TODO add your handling code here:
        set_id("customer");
        add_flag = true;
        search_flag = false;
        modify_flag = false;
        delete_flag = false;
        
        //Set the Buttons visibility
        CustomerIdText.setEnabled(false);
        CustomerNameText.setEnabled(true);
        CustomerLastnameText.setEnabled(true);
        CustomerPhoneText.setEnabled(true);
        CustomerMailText.setEnabled(true);
        CustomerProvinceCombo.setEnabled(true);
        CustomerCantonText.setEnabled(true);
        CustomerDistrictText.setEnabled(true);
        CustomerDayText.setEnabled(true);
        CustomerMonthCombo.setEnabled(true);
        CustomerYearText.setEnabled(true);
        AcceptCustomerButton.setEnabled(true);
        CancelCustomerButton.setEnabled(true);
        SearchModifyButton.setEnabled(false);
        SearchModifyButton.setVisible(false);
        ResetButton.setEnabled(false);
        
        AddCustomerButton.setEnabled(false);
        SearchCustomerButton.setEnabled(false);
        ModifyCustomerButton.setEnabled(false);
        DeleteCustomerButton.setEnabled(false);
        ResetButton.setEnabled(false);
    }//GEN-LAST:event_AddCustomerButtonActionPerformed

    private void ModifyCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyCustomerButtonActionPerformed
        // TODO add your handling code here:
        //Set the ButtonFlags
        modify_flag = true;
        add_flag = false;
        search_flag = false;
        delete_flag = false;
        
        //Set the Buttons visibility
        CustomerIdText.setEnabled(true);
        CustomerNameText.setEnabled(false);
        CustomerLastnameText.setEnabled(false);
        CustomerPhoneText.setEnabled(false);
        CustomerMailText.setEnabled(false);
        CustomerProvinceCombo.setEnabled(false);
        CustomerCantonText.setEnabled(false);
        CustomerDistrictText.setEnabled(false);
        CustomerDayText.setEnabled(false);
        CustomerMonthCombo.setEnabled(false);
        CustomerYearText.setEnabled(false);
        AcceptCustomerButton.setEnabled(false);
        CancelCustomerButton.setEnabled(true);
        SearchModifyButton.setEnabled(true);
        SearchModifyButton.setVisible(true);
        
        AddCustomerButton.setEnabled(false);
        SearchCustomerButton.setEnabled(false);
        ModifyCustomerButton.setEnabled(false);
        DeleteCustomerButton.setEnabled(false);
    }//GEN-LAST:event_ModifyCustomerButtonActionPerformed

    private void CustomerIdTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerIdTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerIdTextActionPerformed

    private void CustomerNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerNameTextActionPerformed

    private void CustomerLastnameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerLastnameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerLastnameTextActionPerformed

    private void CustomerPhoneTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerPhoneTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerPhoneTextActionPerformed

    private void CustomerMailTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerMailTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerMailTextActionPerformed

    private void CustomerCantonTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerCantonTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerCantonTextActionPerformed

    private void CustomerDistrictTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerDistrictTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerDistrictTextActionPerformed
    
    private void add_id(String id_mode){
        String archive = Paths.get("src", "DataBase", "ID's.csv").toString();
        FileWriter fw = null;
        PrintWriter pw = null;
        try{ 
            fw = new FileWriter(archive);
            pw = new PrintWriter(fw);
            for (id_class i : main_class.ids) {
            String line = null;

            if (id_mode.equals("customer")) {
                 line = i.getId_product() + "," + i.getId_item() + "," + (i.getId_customer() + 1) + "," + i.getId_maintenance() + "," + i.getId_bill() + "," + i.getId_detail();
            }
            pw.println(line);
            }
            
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally{
            try{
                if(fw != null){
                    fw.close();
            }
            }catch(Exception ex){
                    ex.printStackTrace();
            }      
        }
    }
    
    private boolean verify_use(String customer){
        System.out.println(customer);
        for (maintenance_class A : main_class.maintenance) {
            if(A.getCustomer_id().equals(customer)){
                JOptionPane.showMessageDialog(this, "This Customer Is Already In Maintenance");
                return true;
            }    
        }
        return false;
    }
    
    private void AcceptCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptCustomerButtonActionPerformed
        // TODO add your handling code here:
        mt.setColumnIdentifiers(ids);
        SearchTable.setModel(mt);
        
        //THIS IS FOR THE ADD OPTION
        if(add_flag == true){
            //Collect data from the TextFields and ComboBoxes and Validate
            //Name
            String name = CustomerNameText.getText();
            if(name.equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Name");
                return;
            }
            name = name.trim();
        
            //Lastname
            String lastname = CustomerLastnameText.getText();
            if(lastname.equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Lastname");
                return;
            }
            lastname = lastname.trim();
        
            //Phone
            String phone_valid = CustomerPhoneText.getText();
            if(phone_valid.equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Phone");
                return;
            }
            boolean result = isNumeric(phone_valid);
            if(result == false){
                JOptionPane.showMessageDialog(null, "The phone number must be numeric");
                return;
            }
            if(phone_valid.length() != 8){
                JOptionPane.showMessageDialog(null, "The phone number must have 8 digits");
                return;
            }
            if(phone_valid.charAt(0) != '2' && phone_valid.charAt(0) != '4' && phone_valid.charAt(0) != '6' && phone_valid.charAt(0) != '8'){
                JOptionPane.showMessageDialog(null, "The phone number must start with 2, 4, 6 or 8");
                return;
            }
            int phone = Integer.parseInt(phone_valid);
        
            //eMail
            String email = CustomerMailText.getText();
            if(email.equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this data: Customer eMail");
                return;
            }
            email = email.trim();
            boolean valid_email = validateMail(email);
            if (valid_email == false){
                JOptionPane.showMessageDialog(null, "The email must be in the correct format: Google-like format");
                return;
            }
        
            //Province (Don't need to be validated)
            String province = CustomerProvinceCombo.getSelectedItem().toString();
        
            //Canton
            String canton = CustomerCantonText.getText();
            if(canton.equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Canton");
                return;
            }
            canton = canton.trim();
        
            //District
            String district = CustomerDistrictText.getText();
            if(district.equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this data: Customer District");
                return;
            }
            district = district.trim();
        
            //Birthdate (And build the Date)
            //Day
            if(CustomerDayText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Birthdate Day");
                return;
            }
            if(isNumeric(CustomerDayText.getText()) == false){
                JOptionPane.showMessageDialog(null, "The phone number must be numeric");
                return;
            }
            int day = Integer.parseInt(CustomerDayText.getText());
            
            //Month
            int month = Integer.parseInt(CustomerMonthCombo.getSelectedItem().toString());
            
            //Year
            if(CustomerYearText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Birthdate Day");
                return;
            }
            if(isNumeric(CustomerYearText.getText()) == false){
                JOptionPane.showMessageDialog(null, "The phone number must be numeric");
                return;
            }
            int year = Integer.parseInt(CustomerYearText.getText());
            
            //Next
            boolean pass_flag = validateDate(day, month, year);
            if(pass_flag == false){
                return;
            }
            Date date = new Date(year-1900, month-1, day);
            
            //Set the customer ID
            int aux = 0;
            int aux_id = 0;
            System.out.println(customers_list);
            for(customer_class customer:customers_list){
                System.out.println(customers_list.size());
                System.out.println(customer.getCustomer_id());
                if(aux == (customers_list.size() - 1)){
                    aux_id = customer.getCustomer_id();
                    break;
                }
                aux++;
            }
            
            //Confirm the add
            int confirm_accept = JOptionPane.showConfirmDialog(null, "Are you sure to accept?");
            if(confirm_accept != 0){
                return;
            }
            //Create the temporary Object
            customer_class new_object = new customer_class();

            //Set the new object data
            new_object.setCustomer_id(aux_id + 1);
            new_object.setCustomer_name(name);
            new_object.setCustomer_lastname(lastname);
            new_object.setCustomer_phone(phone);
            new_object.setCustomer_email(email);
            new_object.setCustomer_province(province);
            new_object.setCustomer_canton(canton);
            new_object.setCustomer_district(district);
            new_object.setCustomer_birthdate(date);

            //Add the object to the ArrayList and the JTable
            customers_list.add(new_object);
            customers_dict.put(new_object.getCustomer_name(), new_object.getCustomer_id()+"");
            mt.addRow(new Object []{new_object.getCustomer_id(), new_object.getCustomer_name(), new_object.getCustomer_lastname()});
            SearchTable.updateUI();
            
            //Add items to the CSV file
            WriteCSV();
            
            //Reset the Textfields ******
            CustomerNameText.setText("");
            CustomerLastnameText.setText("");
            CustomerPhoneText.setText("");
            CustomerMailText.setText("");
            CustomerCantonText.setText("");
            CustomerDistrictText.setText("");
            CustomerDayText.setText("01");
            CustomerYearText.setText("1900");
            JOptionPane.showMessageDialog(null, "Added Succesfully");
            add_id("customer");
            id_class id = main_class.ids.get(0);
            id.setId_customer(id.getId_customer()+ 1);
            
            //Set the ButtonFlags
            search_flag = false;
            add_flag = false;
            modify_flag = false;
            delete_flag = false;
        
            //Set the Buttons visibility
            CustomerIdText.setEnabled(false);
            CustomerNameText.setEnabled(false);
            CustomerLastnameText.setEnabled(false);
            CustomerPhoneText.setEnabled(false);
            CustomerMailText.setEnabled(false);
            CustomerProvinceCombo.setEnabled(false);
            CustomerCantonText.setEnabled(false);
            CustomerDistrictText.setEnabled(false);
            CustomerDayText.setEnabled(false);
            CustomerMonthCombo.setEnabled(false);
            CustomerYearText.setEnabled(false);
            AcceptCustomerButton.setEnabled(false);
            CancelCustomerButton.setEnabled(false);
            SearchModifyButton.setEnabled(false);
            SearchModifyButton.setVisible(false);
            
            AddCustomerButton.setEnabled(true);
            SearchCustomerButton.setEnabled(true);
            ModifyCustomerButton.setEnabled(true);
            DeleteCustomerButton.setEnabled(true);
            ResetButton.setEnabled(false);
            
            //Set the default Text
            CustomerIdText.setText("");
            CustomerNameText.setText("");
            CustomerLastnameText.setText("");
            CustomerPhoneText.setText("");
            CustomerMailText.setText("");
            CustomerCantonText.setText("");
            CustomerDistrictText.setText("");
            CustomerDayText.setText("01");
            CustomerYearText.setText("1900");
        
        //THIS IS FOR THE SEARCH OPTION
        } else if(search_flag == true){
            String name = CustomerNameText.getText();
            boolean aux = isNumeric(CustomerIdText.getText());
            boolean pass_flag = false;
            int id = 0;
            if("".equals(CustomerIdText.getText())){
                if(name.equals("")){
                    JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Id or Customer Name");
                    return;
                }
            } else {
                if(aux == false){
                    JOptionPane.showMessageDialog(null, "The customer id must be numeric");
                    return;
                } else {
                    pass_flag = true;
                }
            }
            if(pass_flag == true){
                id = Integer.parseInt(CustomerIdText.getText());
            }
            for(customer_class customer:customers_list){
                if(customer.getCustomer_id() == id || customer.getCustomer_name().equals(name)){
                    CustomerIdText.setText(customer.getCustomer_id()+"");
                    CustomerNameText.setText(customer.getCustomer_name());
                    CustomerLastnameText.setText(customer.getCustomer_lastname());
                    CustomerPhoneText.setText(customer.getCustomer_phone()+"");
                    CustomerMailText.setText(customer.getCustomer_email());
                    CustomerProvinceCombo.setSelectedItem(customer.getCustomer_province());
                    CustomerCantonText.setText(customer.getCustomer_canton());
                    CustomerDistrictText.setText(customer.getCustomer_district());
                    CustomerDayText.setText(customer.getCustomer_birthdate().getDate()+"");
                    CustomerMonthCombo.setSelectedIndex(customer.getCustomer_birthdate().getMonth());
                    CustomerYearText.setText((customer.getCustomer_birthdate().getYear()+1900)+"");

                    CustomerIdText.setEnabled(false);
                    CustomerNameText.setEnabled(false);
                    CustomerLastnameText.setEnabled(false);
                    CustomerPhoneText.setEnabled(false);
                    CustomerMailText.setEnabled(false);
                    CustomerProvinceCombo.setEnabled(false);
                    CustomerCantonText.setEnabled(false);
                    CustomerDistrictText.setEnabled(false);
                    CustomerDayText.setEnabled(false);
                    CustomerMonthCombo.setEnabled(false);
                    CustomerYearText.setEnabled(false);
                    AcceptCustomerButton.setEnabled(false);
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Not found");
            
        //THIS IS FOR THE MODIFY OPTION
        } else if(modify_flag == true){
            int original_id = Integer.parseInt(CustomerIdText.getText());
            int index_aux = 0;
            for(customer_class actual_customer:customers_list){
                int customer_id = actual_customer.getCustomer_id();
                if(customer_id == original_id){
                    
                    //ORIGINAL INFORMATION
                    Date original_birthdate = actual_customer.getCustomer_birthdate();
                    
                    //Collect data from the TextFields and ComboBoxes and Validate
                    //Name
                    String name = CustomerNameText.getText();
                    if(name.equals("")){
                        JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Name");
                        return;
                    }
                    name = name.trim();
                    
                    //Lastname
                    String lastname = CustomerLastnameText.getText();
                    if(lastname.equals("")){
                        JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Lastname");
                        return;
                    }
                    lastname = lastname.trim();
                    
                    //Phone
                    String phone_valid = CustomerPhoneText.getText();
                    if(phone_valid.equals("")){
                        JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Phone");
                        return;
                    }
                    boolean result = isNumeric(phone_valid);
                    if(result == false){
                        JOptionPane.showMessageDialog(null, "The phone number must be numeric");
                        return;
                    }
                    if(phone_valid.length() != 8){
                        JOptionPane.showMessageDialog(null, "The phone number must have 8 digits");
                        return;
                    }
                    if(phone_valid.charAt(0) != '2' && phone_valid.charAt(0) != '4' && phone_valid.charAt(0) != '6' && phone_valid.charAt(0) != '8'){
                        JOptionPane.showMessageDialog(null, "The phone number must start with 2, 4, 6 or 8");
                        return;
                    }
                    int phone = Integer.parseInt(phone_valid);
                    
                    //eMail
                    String email = CustomerMailText.getText();
                    if(email.equals("")){
                        JOptionPane.showMessageDialog(null, "You need to complete this data: Customer eMail");
                        return;
                    }
                    email = email.trim();
                    boolean valid_email = validateMail(email);
                    if (valid_email == false){
                        JOptionPane.showMessageDialog(null, "The email must be in the correct format: Google-like format");
                        return;
                    }
                    
                    //Province (Don't need to be validated)
                    String province = CustomerProvinceCombo.getSelectedItem().toString();
                    
                    //Canton
                    String canton = CustomerCantonText.getText();
                    if(canton.equals("")){
                        JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Canton");
                        return;
                    }
                    canton = canton.trim();
                    
                    //District
                    String district = CustomerDistrictText.getText();
                    if(district.equals("")){
                        JOptionPane.showMessageDialog(null, "You need to complete this data: Customer District");
                        return;
                    }
                    district = district.trim();
                    
                    //Birthdate (And build the Date)
                    //Day
                    if(CustomerDayText.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Birthdate Day");
                        return;
                    }
                    if(isNumeric(CustomerDayText.getText()) == false){
                        JOptionPane.showMessageDialog(null, "The phone number must be numeric");
                        return;
                    }
                    int day = Integer.parseInt(CustomerDayText.getText());

                    //Month
                    int month = Integer.parseInt(CustomerMonthCombo.getSelectedItem().toString());

                    //Year
                    if(CustomerYearText.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Birthdate Day");
                        return;
                    }
                    if(isNumeric(CustomerYearText.getText()) == false){
                        JOptionPane.showMessageDialog(null, "The phone number must be numeric");
                        return;
                    }
                    int year = Integer.parseInt(CustomerYearText.getText());

                    //Next
                    boolean pass_flag2 = validateDate(day, month, year);
                    if(pass_flag2 == false){
                        return;
                    }
                    Date date = new Date(year-1900, month-1, day);
                    String original_date = original_birthdate.getDate()+"/"+(original_birthdate.getMonth()+1)+"/"+(original_birthdate.getYear()+1900);
                    String date_of_birth = date.getDate()+"/"+(date.getMonth()+1)+"/"+(date.getYear()+1900);
                    
                    //Confirm the modify
                    int confirm_delete = JOptionPane.showConfirmDialog(null, "Submit the modify:\nBefore:\nId: "+actual_customer.getCustomer_id()+"\nName: "+actual_customer.getCustomer_name()+"\nLastname: "+actual_customer.getCustomer_lastname()+"\nPhone: "+actual_customer.getCustomer_phone()+"\neMail: "+actual_customer.getCustomer_email()+"\nProvince: "+actual_customer.getCustomer_province()+"\nCanton: "+actual_customer.getCustomer_canton()+"\nDistrict: "+actual_customer.getCustomer_district()+"\nBirthdate: "+original_date+"\n"+"\nModified:\nId: "+original_id+"\nName: "+name+"\nLastname: "+lastname+"\nPhone: "+phone+"\neMail: "+email+"\nProvince: "+province+"\nCanton: "+canton+"\nDistrict: "+district+"\nBirthdate: "+date_of_birth);
                    if(confirm_delete != 0){
                        return;
                    } else {
                        boolean found = verify_use(String.valueOf(actual_customer.getCustomer_id() + "-" + actual_customer.getCustomer_name()));
                        if (found == true){
                            return;
                        }
                        //Set the modified object data
                        actual_customer.setCustomer_id(original_id);
                        actual_customer.setCustomer_name(name);
                        actual_customer.setCustomer_lastname(lastname);
                        actual_customer.setCustomer_phone(phone);
                        actual_customer.setCustomer_email(email);
                        actual_customer.setCustomer_province(province);
                        actual_customer.setCustomer_canton(canton);
                        actual_customer.setCustomer_district(district);
                        actual_customer.setCustomer_birthdate(date);
                    }

                    //Add the object to the JTable
                    mt.removeRow(index_aux);
                    mt.addRow(new Object []{actual_customer.getCustomer_id(), actual_customer.getCustomer_name(), actual_customer.getCustomer_lastname()});
                    SearchTable.updateUI();

                    //Add items to the CSV file
                    WriteCSV();

                    //Reset the Textfields ******
                    CustomerIdText.setText("");
                    CustomerNameText.setText("");
                    CustomerLastnameText.setText("");
                    CustomerPhoneText.setText("");
                    CustomerMailText.setText("");
                    CustomerCantonText.setText("");
                    CustomerDistrictText.setText("");
                    CustomerDayText.setText("01");
                    CustomerYearText.setText("1900");
                    
                    CustomerIdText.setEnabled(true);
                    CustomerNameText.setEnabled(false);
                    CustomerLastnameText.setEnabled(false);
                    CustomerPhoneText.setEnabled(false);
                    CustomerMailText.setEnabled(false);
                    CustomerProvinceCombo.setEnabled(false);
                    CustomerCantonText.setEnabled(false);
                    CustomerDistrictText.setEnabled(false);
                    CustomerDayText.setEnabled(false);
                    CustomerMonthCombo.setEnabled(false);
                    CustomerYearText.setEnabled(false);
                    AcceptCustomerButton.setEnabled(false);
                    CancelCustomerButton.setEnabled(true);
                    SearchModifyButton.setEnabled(true);
                    SearchModifyButton.setVisible(true);
                    JOptionPane.showMessageDialog(null, "Modified Succesfully");
                    return;
                }
                index_aux++;
            }
            
        //THIS IS FOR THE DELETE OPTION    
        } else if(delete_flag == true){
            String name = CustomerNameText.getText();
            boolean aux1 = isNumeric(CustomerIdText.getText());
            boolean pass_flag = false;
            int id = 0;
            if("".equals(CustomerIdText.getText())){
                if(name.equals("")){
                    JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Id or Customer Name");
                    return;
                }
            } else {
                if(aux1 == false){
                    JOptionPane.showMessageDialog(null, "The customer id must be numeric");
                    return;
                } else {
                    pass_flag = true;
                }
            }
            if(pass_flag == true){
                id = Integer.parseInt(CustomerIdText.getText());
            }
            
            //VALIDATE IF THE COSTUMER HAVE A BILL
            for(bill_class bill:bills_list){
                if(bill.getCustomer_id() == id && bill.getBill_state().equals("Valid")){
                    JOptionPane.showMessageDialog(null, "This customer can't be deleted, we found this customer in a bill");
                    return;
                }
            }
            int aux2 = 0;
            for(customer_class customer:customers_list){
                if(customer.getCustomer_id() == id || customer.getCustomer_name().equals(name)){
                    Date original_date = customer.getCustomer_birthdate();
                    String date_of_birth = original_date.getDate()+"/"+(original_date.getMonth()+1)+"/"+(original_date.getYear()+1900);
                    int confirm_delete = JOptionPane.showConfirmDialog(null, "Delete this customer:\nId: "+customer.getCustomer_id()+"\nName: "+customer.getCustomer_name()+"\nLastname: "+customer.getCustomer_lastname()+"\nPhone: "+customer.getCustomer_phone()+"\neMail: "+customer.getCustomer_email()+"\nProvince: "+customer.getCustomer_province()+"\nCanton: "+customer.getCustomer_canton()+"\nDistrict: "+customer.getCustomer_district()+"\nBirthdate: "+date_of_birth);
                    if(confirm_delete != 0){
                        return;
                    } else {
                        boolean found = verify_use(String.valueOf(customer.getCustomer_id() + "-" + customer.getCustomer_name()));
                        if (found == true){
                            return;
                        }
                        customers_list.remove(customer);
                        mt.removeRow(aux2);
                        System.out.println(customers_list);
                        SearchTable.updateUI();
                        
                        //Add items to the CSV file
                        WriteCSV();
                        
                        //Reset the Textfields ******
                        CustomerIdText.setText("");
                        CustomerNameText.setText("");
                        JOptionPane.showMessageDialog(null, "Deleted Succesfully");
                        return;
                    }
                }
                aux2++;
            }
            JOptionPane.showMessageDialog(null, "Not found");
        }
    }//GEN-LAST:event_AcceptCustomerButtonActionPerformed

        
    private void CancelCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelCustomerButtonActionPerformed
        // TODO add your handling code here:
        
        int confirm_cancel = JOptionPane.showConfirmDialog(null, "Are you sure to cancel?");
        if(confirm_cancel == 0){
            //Set the ButtonFlags
            search_flag = false;
            add_flag = false;
            modify_flag = false;
            delete_flag = false;
        
            //Set the Buttons visibility
            CustomerIdText.setEnabled(false);
            CustomerNameText.setEnabled(false);
            CustomerLastnameText.setEnabled(false);
            CustomerPhoneText.setEnabled(false);
            CustomerMailText.setEnabled(false);
            CustomerProvinceCombo.setEnabled(false);
            CustomerCantonText.setEnabled(false);
            CustomerDistrictText.setEnabled(false);
            CustomerDayText.setEnabled(false);
            CustomerMonthCombo.setEnabled(false);
            CustomerYearText.setEnabled(false);
            AcceptCustomerButton.setEnabled(false);
            CancelCustomerButton.setEnabled(false);
            SearchModifyButton.setEnabled(false);
            SearchModifyButton.setVisible(false);
            
            AddCustomerButton.setEnabled(true);
            SearchCustomerButton.setEnabled(true);
            ModifyCustomerButton.setEnabled(true);
            DeleteCustomerButton.setEnabled(true);
            ResetButton.setEnabled(false);
            
            //Set the default Text
            CustomerIdText.setText("");
            CustomerNameText.setText("");
            CustomerLastnameText.setText("");
            CustomerPhoneText.setText("");
            CustomerMailText.setText("");
            CustomerCantonText.setText("");
            CustomerDistrictText.setText("");
            CustomerDayText.setText("01");
            CustomerYearText.setText("1900");
        }

        System.out.println(customers_list);
        for(customer_class s:customers_list){
            System.out.println(s.getCustomer_birthdate());
        }
    }//GEN-LAST:event_CancelCustomerButtonActionPerformed

    private void SearchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchCustomerButtonActionPerformed
        // TODO add your handling code here:
        //Set the ButtonFlags
        search_flag = true;
        add_flag = false;
        modify_flag = false;
        delete_flag = false;
        
        //Set the Buttons visibility
        CustomerIdText.setEnabled(true);
        CustomerNameText.setEnabled(true);
        CustomerLastnameText.setEnabled(false);
        CustomerPhoneText.setEnabled(false);
        CustomerMailText.setEnabled(false);
        CustomerProvinceCombo.setEnabled(false);
        CustomerCantonText.setEnabled(false);
        CustomerDistrictText.setEnabled(false);
        CustomerDayText.setEnabled(false);
        CustomerMonthCombo.setEnabled(false);
        CustomerYearText.setEnabled(false);
        AcceptCustomerButton.setEnabled(true);
        CancelCustomerButton.setEnabled(true);
        SearchModifyButton.setEnabled(false);
        SearchModifyButton.setVisible(false);
        
        AddCustomerButton.setEnabled(false);
        SearchCustomerButton.setEnabled(false);
        ModifyCustomerButton.setEnabled(false);
        DeleteCustomerButton.setEnabled(false);
        ResetButton.setEnabled(true);
        
        //UpdateUI - Table
        mt.setColumnIdentifiers(ids);
        SearchTable.setModel(mt);
        SearchTable.updateUI();
        
    }//GEN-LAST:event_SearchCustomerButtonActionPerformed

    private void DeleteCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCustomerButtonActionPerformed
        // TODO add your handling code here:
        //Set the ButtonFlags
        delete_flag = true;
        add_flag = false;
        search_flag = false;
        modify_flag = false;
        
        //Set the Buttons visibility
        CustomerIdText.setEnabled(true);
        CustomerNameText.setEnabled(true);
        CustomerLastnameText.setEnabled(false);
        CustomerPhoneText.setEnabled(false);
        CustomerMailText.setEnabled(false);
        CustomerProvinceCombo.setEnabled(false);
        CustomerCantonText.setEnabled(false);
        CustomerDistrictText.setEnabled(false);
        CustomerDayText.setEnabled(false);
        CustomerMonthCombo.setEnabled(false);
        CustomerYearText.setEnabled(false);
        AcceptCustomerButton.setEnabled(true);
        CancelCustomerButton.setEnabled(true);
        SearchModifyButton.setEnabled(false);
        SearchModifyButton.setVisible(false);
        
        AddCustomerButton.setEnabled(false);
        SearchCustomerButton.setEnabled(false);
        ModifyCustomerButton.setEnabled(false);
        DeleteCustomerButton.setEnabled(false);
        ResetButton.setEnabled(false);
        
        mt.setColumnIdentifiers(ids);
        SearchTable.setModel(mt);
        SearchTable.updateUI();
    }//GEN-LAST:event_DeleteCustomerButtonActionPerformed

    private void SearchModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchModifyButtonActionPerformed
        //SEARCH THE ID
        int original_id = 0;
            
        if(CustomerIdText.getText().equals("")){
            JOptionPane.showMessageDialog(null, "You need to complete this data: Customer Id");
            return;
        } else {
            if(isNumeric(CustomerIdText.getText()) == false){
                JOptionPane.showMessageDialog(null, "The customer id must be numeric");
                return;
            } else {
                original_id = Integer.parseInt(CustomerIdText.getText());
            }
        }
        for(customer_class actual_customer:customers_list){
            int customer_id = actual_customer.getCustomer_id();
            if(customer_id == original_id){
                CustomerIdText.setText(customer_id+"");
                CustomerNameText.setText(actual_customer.getCustomer_name());
                CustomerLastnameText.setText(actual_customer.getCustomer_lastname());
                CustomerPhoneText.setText(actual_customer.getCustomer_phone()+"");
                CustomerMailText.setText(actual_customer.getCustomer_email());
                CustomerProvinceCombo.setSelectedItem(actual_customer.getCustomer_province());
                CustomerCantonText.setText(actual_customer.getCustomer_canton());
                CustomerDistrictText.setText(actual_customer.getCustomer_district());
                CustomerDayText.setText(actual_customer.getCustomer_birthdate().getDate()+"");
                CustomerMonthCombo.setSelectedIndex(actual_customer.getCustomer_birthdate().getMonth());
                CustomerYearText.setText((actual_customer.getCustomer_birthdate().getYear()+1900)+"");
                
                CustomerIdText.setEnabled(false);
                CustomerNameText.setEnabled(true);
                CustomerLastnameText.setEnabled(true);
                CustomerPhoneText.setEnabled(true);
                CustomerMailText.setEnabled(true);
                CustomerProvinceCombo.setEnabled(true);
                CustomerCantonText.setEnabled(true);
                CustomerDistrictText.setEnabled(true);
                CustomerDayText.setEnabled(true);
                CustomerMonthCombo.setEnabled(true);
                CustomerYearText.setEnabled(true);
                AcceptCustomerButton.setEnabled(true);
                SearchModifyButton.setEnabled(false);
                return;
            }
        }
        JOptionPane.showMessageDialog(null, "Customer not found");
    }//GEN-LAST:event_SearchModifyButtonActionPerformed

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        //Set the Buttons visibility
        CustomerIdText.setEnabled(true);
        CustomerNameText.setEnabled(true);
        CustomerLastnameText.setEnabled(false);
        CustomerPhoneText.setEnabled(false);
        CustomerMailText.setEnabled(false);
        CustomerProvinceCombo.setEnabled(false);
        CustomerCantonText.setEnabled(false);
        CustomerDistrictText.setEnabled(false);
        CustomerDayText.setEnabled(false);
        CustomerMonthCombo.setEnabled(false);
        CustomerYearText.setEnabled(false);
        AcceptCustomerButton.setEnabled(true);
        CancelCustomerButton.setEnabled(true);
        SearchModifyButton.setEnabled(false);
        SearchModifyButton.setVisible(false);
        
        //Reset the Textfields ******
        CustomerIdText.setText("");
        CustomerNameText.setText("");
        CustomerLastnameText.setText("");
        CustomerPhoneText.setText("");
        CustomerMailText.setText("");
        CustomerCantonText.setText("");
        CustomerDistrictText.setText("");
        CustomerDayText.setText("01");
        CustomerYearText.setText("1900");
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void CustomerProvinceComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerProvinceComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerProvinceComboActionPerformed

    private void AddCustomerButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddCustomerButtonMouseEntered
        AddCustomerButton.setForeground(Color.GRAY);
        AddCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/agregar-usuario-42.png")));
        
    }//GEN-LAST:event_AddCustomerButtonMouseEntered

    private void AddCustomerButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddCustomerButtonMouseExited
        AddCustomerButton.setForeground(Color.black);
        AddCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/agregar-usuario-32.png")));
    }//GEN-LAST:event_AddCustomerButtonMouseExited

    private void SearchCustomerButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchCustomerButtonMouseEntered
        SearchCustomerButton.setForeground(Color.GRAY);
        SearchCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/buscar-usuario-42.png")));
    }//GEN-LAST:event_SearchCustomerButtonMouseEntered

    private void SearchCustomerButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchCustomerButtonMouseExited
        SearchCustomerButton.setForeground(Color.black);
        SearchCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/buscar-usuario-32.png")));
    }//GEN-LAST:event_SearchCustomerButtonMouseExited

    private void DeleteCustomerButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteCustomerButtonMouseEntered
        DeleteCustomerButton.setForeground(Color.GRAY);
        DeleteCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/eliminar-usuario-42.png")));
    }//GEN-LAST:event_DeleteCustomerButtonMouseEntered

    private void DeleteCustomerButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteCustomerButtonMouseExited
        DeleteCustomerButton.setForeground(Color.black);
        DeleteCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/eliminar-usuario-32.png")));
    }//GEN-LAST:event_DeleteCustomerButtonMouseExited

    private void ModifyCustomerButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ModifyCustomerButtonMouseEntered
        ModifyCustomerButton.setForeground(Color.GRAY);
        ModifyCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/modificar-usuario-42.png")));
    }//GEN-LAST:event_ModifyCustomerButtonMouseEntered

    private void ModifyCustomerButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ModifyCustomerButtonMouseExited
        ModifyCustomerButton.setForeground(Color.black);
        ModifyCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/modificar-usuario-32.png")));
    }//GEN-LAST:event_ModifyCustomerButtonMouseExited

    private void SearchModifyButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchModifyButtonMouseEntered
        SearchModifyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/boton_buscar-32.png")));
    }//GEN-LAST:event_SearchModifyButtonMouseEntered

    private void SearchModifyButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchModifyButtonMouseExited
        SearchModifyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/boton_buscar-24.png")));
    }//GEN-LAST:event_SearchModifyButtonMouseExited

    private void AcceptCustomerButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AcceptCustomerButtonMouseEntered
        if (AcceptCustomerButton.isEnabled()) {
        AcceptCustomerButton.setForeground(Color.GRAY);
        AcceptCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Aceptar-42GIF.gif")));
       }
    }//GEN-LAST:event_AcceptCustomerButtonMouseEntered

    private void AcceptCustomerButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AcceptCustomerButtonMouseExited
       if (AcceptCustomerButton.isEnabled()) {
       AcceptCustomerButton.setForeground(Color.black);
       AcceptCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/aceptar-32.png")));
       }
    }//GEN-LAST:event_AcceptCustomerButtonMouseExited

    private void CancelCustomerButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelCustomerButtonMouseEntered
        if (CancelCustomerButton.isEnabled()) {
        CancelCustomerButton.setForeground(Color.GRAY);
        CancelCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/cancelar-42GIF.gif")));
       }
    }//GEN-LAST:event_CancelCustomerButtonMouseEntered

    private void CancelCustomerButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelCustomerButtonMouseExited
        if (CancelCustomerButton.isEnabled()) {
       CancelCustomerButton.setForeground(Color.black);
       CancelCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/cancelar-32.png")));
       }
    }//GEN-LAST:event_CancelCustomerButtonMouseExited

    private void ResetButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetButtonMouseEntered
        if (ResetButton.isEnabled()) {
        ResetButton.setForeground(Color.GRAY);
        ResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/reset-42GIF.gif")));
       }
    }//GEN-LAST:event_ResetButtonMouseEntered

    private void ResetButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetButtonMouseExited
        if (ResetButton.isEnabled()) {
        ResetButton.setForeground(Color.black);
        ResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/reset-32.png")));
       }
    }//GEN-LAST:event_ResetButtonMouseExited
    
    /**
    * This function is used to delete this panel from the Main Menu.
    * @author josem
    */
    private static void borrarPanel(JPanel panel) {
        panel.removeAll();
        panel.revalidate();
        panel.repaint();
    }
    
    /**
    * This function is used to show this panel in the Main Menu.
    * @author josem
    */
    private void ShowJPanel(JPanel p){

        p.setSize(1030,750);
        p.setLocation(0,0);
        CustomersView.removeAll();
        CustomersView.add(p, BorderLayout.CENTER);
        CustomersView.revalidate();
        CustomersView.repaint();
    } 
    
    /**
    * This function is used to check if the input is a numeric String.
    * @author josem
    */
    private static boolean isNumeric(String cadena){
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe){
        return false;
        }
    }
    
    /**
    * This function is used to validate any mail (with the Google-like format).
    * @author josem
    */
    private static boolean validateMail(String email){
        Pattern pattern = Pattern.compile("([a-z0-9]+(\\.?[a-z0-9])*)+@(([a-z]+)\\.([a-z]+))+");
        Matcher mather = pattern.matcher(email);
        return mather.find() != false;
    }
    
    /**
    * This function is used to validate any date.
    * @author josem
    * @param day The date day
    * @param month The date month
    * @param year The date year
    * @return True if is validated correctly, else False
    */
    private static boolean validateDate(int day, int month, int year){
        boolean pass_flag = false;
        switch(month){
            case 1:if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }

            case 2:if(year%100 == 0){ //Secular year
                if(year%400 == 0){ //Bisiest year
                    if(day<1 || day>29){
                        JOptionPane.showMessageDialog(null, "You need to put a valid date");
                        pass_flag = false;
                        break;
                    }else{
                        pass_flag = true;
                        break;
                    }
                }else{
                    if(day<1 || day>28){
                        JOptionPane.showMessageDialog(null, "You need to put a valid date");
                        pass_flag = false;
                        break;
                    }else{
                        pass_flag = true;
                        break;
                    } 
                }
            }else{
                if(year%4 == 0){
                    if(day<1 || day>29){
                        JOptionPane.showMessageDialog(null, "You need to put a valid date");
                        pass_flag = false;
                        break;
                    }else{
                        pass_flag = true;
                        break;
                    }
                }else{
                    if(day<1 || day>28){
                        JOptionPane.showMessageDialog(null, "You need to put a valid date");
                        pass_flag = false;
                        break;
                    }else{
                        pass_flag = true;
                        break;
                    }
                }
            }

            case 3: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 4: if(day<1 || day>30){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 5: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 6: if(day<1 || day>30){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 7: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 8: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 9: if(day<1 || day>30){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 10: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 11: if(day<1 || day>30){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 12: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
        }
        if(year<1900 || year>2023){
            JOptionPane.showMessageDialog(null, "You need to put a valid date");
            pass_flag = false;
        }
        return pass_flag;
    }
    
    /**
    * This function is used to set the jTable column identifiers and show the information changes.
    * @author josem
    */
    private void showTable(){
        mt.setColumnIdentifiers(ids);
        SearchTable.updateUI();
    }
    
    private void LoadBilling(){
        String archive = Paths.get("src", "DataBase", "Archivo_CSV_Bills.csv").toString();
        try {
            reader = new BufferedReader(new FileReader(archive));
            while((line = reader.readLine()) != null){
                bill_class temporary_object = new bill_class();
                parts = line.split(",");
                int day = 0;
                int month = 0;
                int year = 0;
                Date date = null;
                for(int i = 0; i < parts.length; i++){
                    switch(i){
                        case 0:
                            temporary_object.setBill_id(Integer.parseInt(parts[i]));
                            break;
                        case 1:
                            temporary_object.setCustomer_id(Integer.parseInt(parts[i]));
                            break;
                        case 2:
                            day = Integer.parseInt(parts[i]);
                            break;
                        case 3:
                            month = Integer.parseInt(parts[i]) - 1;
                            break;
                        case 4:
                            year = Integer.parseInt(parts[i]) - 1900;
                            date = new Date(year, month, day);
                            temporary_object.setBill_date(date);
                            break;
                        case 5:
                            temporary_object.setBill_state(parts[i]);
                            break;
                        case 6:
                            temporary_object.setBill_subtotal(Integer.parseInt(parts[i]));
                            break;
                        case 7:
                            temporary_object.setBill_tax(Integer.parseInt(parts[i]));
                            break;
                        case 8:
                            temporary_object.setBill_total(Integer.parseInt(parts[i]));
                            break;
                    }
                }
                bills_list.add(temporary_object);
            }
            reader.close();
            line = null;
            parts = null;
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    /**
    * This function is used to initialize the jTable content, and read the CSV File, to create the ArrayList.
    * @author josem
    */
    private void initializeCustomers(){
        mt.setColumnIdentifiers(ids);
        SearchTable.setModel(mt);
        
        SearchModifyButton.setVisible(false);
        ResetButton.setEnabled(false);
        
        String archive = Paths.get("src", "DataBase", "Archivo_CSV_Customers.csv").toString();
        try {
            reader = new BufferedReader(new FileReader(archive));
            while((line = reader.readLine()) != null){
                customer_class temporary_object = new customer_class();
                parts = line.split(",");
                int aux_day = 0;
                int aux_month = 0;
                int aux_year = 0;
                Date birthdate = null;
                for(int i = 0; i < parts.length; i++){
                    switch(i){
                        case 0:
                            temporary_object.setCustomer_id(Integer.parseInt(parts[i]));
                            break;
                        case 1:
                            temporary_object.setCustomer_name(parts[i]);
                            break;
                        case 2:
                            temporary_object.setCustomer_lastname(parts[i]);
                            break;
                        case 3:
                            temporary_object.setCustomer_phone(Integer.parseInt(parts[i]));
                            break;
                        case 4:
                            temporary_object.setCustomer_email(parts[i]);
                            break;
                        case 5:
                            temporary_object.setCustomer_province(parts[i]);
                            break;
                        case 6:
                            temporary_object.setCustomer_canton(parts[i]);
                            break;
                        case 7:
                            temporary_object.setCustomer_district(parts[i]);
                            break;
                        case 8:
                            aux_day = Integer.parseInt(parts[i]);
                            break;
                        case 9:
                            aux_month = Integer.parseInt(parts[i]);
                            break;
                        case 10:
                            aux_year = Integer.parseInt(parts[i]);
                            temporary_object.setCustomer_birthdate(new Date(aux_year-1900, aux_month-1, aux_day));
                            break;
                    }
                }
                customers_list.add(temporary_object);
                customers_dict.put(temporary_object.getCustomer_name(), temporary_object.getCustomer_id()+"");
                mt.addRow(new Object []{temporary_object.getCustomer_id(), temporary_object.getCustomer_name(), temporary_object.getCustomer_lastname()});
                SearchTable.updateUI();
            }
            reader.close();
            line = null;
            parts = null;
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    /**
    * This function is used to write the CSV file with the new informnation.
    * @author josem
    */
    private void WriteCSV(){
        String archive = Paths.get("src", "DataBase", "Archivo_CSV_Customers.csv").toString();
        FileWriter fw = null;
        PrintWriter pw = null;
        
        try{ 
            fw = new FileWriter(archive);
            pw = new PrintWriter(fw);
            for(customer_class i: customers_list){
                Date original_date = i.getCustomer_birthdate();
                String date_of_birth = original_date.getDate()+","+(original_date.getMonth()+1)+","+(original_date.getYear()+1900);
                String line = i.getCustomer_id()+","+i.getCustomer_name()+","+i.getCustomer_lastname()+","+i.getCustomer_phone()+","+i.getCustomer_email()+","+i.getCustomer_province()+","+i.getCustomer_canton()+","+i.getCustomer_district()+","+date_of_birth;
                pw.println(line);
            }
            
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally{
            try{
                if(fw != null){
                    fw.close();
                }
            }catch(Exception ex){
                    ex.printStackTrace();
            }      
        }
    }
    
    boolean add_flag = false;
    boolean search_flag = false;
    boolean modify_flag = false;
    boolean delete_flag = false;
    
    //INITIALIZE
    private BufferedReader reader;
    private String line;
    private String parts[] = null;
    ArrayList<customer_class> customers_list = new ArrayList<>();
    ArrayList<bill_class> bills_list = new ArrayList<>();
    Dictionary customers_dict = new Hashtable ();
    DefaultTableModel mt = new DefaultTableModel();
    String ids [] = {"Id", "Name", "Lastname"};

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptCustomerButton;
    private javax.swing.JButton AddCustomerButton;
    private javax.swing.JButton CancelCustomerButton;
    private javax.swing.JLabel CustomerBirthdateLabel;
    private javax.swing.JLabel CustomerCantonLabel;
    private javax.swing.JTextField CustomerCantonText;
    private javax.swing.JTextField CustomerDayText;
    private javax.swing.JLabel CustomerDistrictLabel;
    private javax.swing.JTextField CustomerDistrictText;
    private javax.swing.JLabel CustomerIdLabel;
    private javax.swing.JTextField CustomerIdText;
    private javax.swing.JLabel CustomerLastnameLabel;
    private javax.swing.JTextField CustomerLastnameText;
    private javax.swing.JLabel CustomerMailLabel;
    private javax.swing.JTextField CustomerMailText;
    private javax.swing.JComboBox<String> CustomerMonthCombo;
    private javax.swing.JLabel CustomerNameLabel;
    private javax.swing.JTextField CustomerNameText;
    private javax.swing.JLabel CustomerPhoneLabel;
    private javax.swing.JTextField CustomerPhoneText;
    private javax.swing.JComboBox<String> CustomerProvinceCombo;
    private javax.swing.JLabel CustomerProvinceLabel;
    private javax.swing.JTextField CustomerYearText;
    private javax.swing.JPanel CustomersView;
    private javax.swing.JLabel CustomersWindowSubtitle;
    private javax.swing.JLabel CustomersWindowTitle;
    private javax.swing.JButton DeleteCustomerButton;
    private javax.swing.JLabel DirectoryPanelLabel;
    private javax.swing.JButton ModifyCustomerButton;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton SearchCustomerButton;
    private javax.swing.JButton SearchModifyButton;
    private javax.swing.JScrollPane SearchScrollPane;
    private javax.swing.JTable SearchTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
