/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;

import Classes.bill_class;
import Classes.customer_class;
import Classes.id_class;
import Classes.item_class;
import Classes.main_class;
import Classes.maintenance_class;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Dictionary;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


/**
 * Billing Screen
 * @author jonns
 */
public class ScreenBilling extends javax.swing.JPanel {

    /**
     * Creates new form ScreenMaintenance
     */
    public ScreenBilling() {
        initComponents();
        initializeBilling();
        ReadCustomers();
        ReadItems();
        ReadMaintenance();
        createIdsCustomers();
        createIdsItems();
        createIdsMaintenance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BillingView = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        BillingWindowTitle = new javax.swing.JLabel();
        BillingWindowSubtitle = new javax.swing.JLabel();
        BillingAddButton = new javax.swing.JButton();
        BillingSearchButton = new javax.swing.JButton();
        BillingRevokeButton = new javax.swing.JButton();
        BillingInputPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ItemBillIdText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ItemBillSubtotalText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ItemCustomerIdCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        ItemReceivementDayText = new javax.swing.JTextField();
        ItemReceivementMonthCombo = new javax.swing.JComboBox<>();
        ItemReceivementYearText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        ItemBillStateCombo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        ItemBillTaxText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        ItemBillTotalText = new javax.swing.JTextField();
        ItemAcceptButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        ItemOptionCombo = new javax.swing.JComboBox<>();
        ItemSearchButton = new javax.swing.JButton();
        BillingInputPanel1 = new javax.swing.JPanel();
        MaintenanceBillIdText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        MaintenanceBillSubtotalText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        MaintenanceCustomerIdCombo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        MaintenanceReceivementDayText = new javax.swing.JTextField();
        MaintenanceReceivementMonthCombo = new javax.swing.JComboBox<>();
        MaintenanceReceivementYearText = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        MaintenanceBillStateCombo = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        MaintenanceBillTaxText = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        MaintenanceBillTotalText = new javax.swing.JTextField();
        MaintenanceAcceptButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        MaintenanceOptionCombo = new javax.swing.JComboBox<>();
        MaintenanceSearchButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        BillingWindowTitle1 = new javax.swing.JLabel();
        BillingCancelButton = new javax.swing.JButton();
        BillingWindowTitle2 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        BillingView.setBackground(new java.awt.Color(255, 255, 255));
        BillingView.setLayout(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/SalirView.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setPreferredSize(new java.awt.Dimension(32, 32));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        BillingView.add(jButton1);
        jButton1.setBounds(992, 6, 32, 32);

        BillingWindowTitle.setFont(new java.awt.Font("Dubai Medium", 1, 24)); // NOI18N
        BillingWindowTitle.setForeground(new java.awt.Color(0, 0, 0));
        BillingWindowTitle.setText("BILLING");
        BillingView.add(BillingWindowTitle);
        BillingWindowTitle.setBounds(480, 10, 87, 42);

        BillingWindowSubtitle.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        BillingWindowSubtitle.setForeground(new java.awt.Color(0, 0, 0));
        BillingWindowSubtitle.setText("Select the action to perform");
        BillingView.add(BillingWindowSubtitle);
        BillingWindowSubtitle.setBounds(440, 40, 170, 24);

        BillingAddButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        BillingAddButton.setForeground(new java.awt.Color(0, 0, 0));
        BillingAddButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/agregar-factura-32.png"))); // NOI18N
        BillingAddButton.setText("Add Bill");
        BillingAddButton.setBorder(null);
        BillingAddButton.setContentAreaFilled(false);
        BillingAddButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BillingAddButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BillingAddButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BillingAddButtonMouseExited(evt);
            }
        });
        BillingAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillingAddButtonActionPerformed(evt);
            }
        });
        BillingView.add(BillingAddButton);
        BillingAddButton.setBounds(300, 60, 100, 50);

        BillingSearchButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        BillingSearchButton.setForeground(new java.awt.Color(0, 0, 0));
        BillingSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/buscar-mantenimiento-32.png"))); // NOI18N
        BillingSearchButton.setText("Search Bill");
        BillingSearchButton.setBorder(null);
        BillingSearchButton.setContentAreaFilled(false);
        BillingSearchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BillingSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BillingSearchButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BillingSearchButtonMouseExited(evt);
            }
        });
        BillingSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillingSearchButtonActionPerformed(evt);
            }
        });
        BillingView.add(BillingSearchButton);
        BillingSearchButton.setBounds(410, 60, 110, 50);

        BillingRevokeButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        BillingRevokeButton.setForeground(new java.awt.Color(0, 0, 0));
        BillingRevokeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/eliminar-mantenimiento-32.png"))); // NOI18N
        BillingRevokeButton.setText("Revoke Bill");
        BillingRevokeButton.setBorder(null);
        BillingRevokeButton.setContentAreaFilled(false);
        BillingRevokeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BillingRevokeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BillingRevokeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BillingRevokeButtonMouseExited(evt);
            }
        });
        BillingRevokeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillingRevokeButtonActionPerformed(evt);
            }
        });
        BillingView.add(BillingRevokeButton);
        BillingRevokeButton.setBounds(530, 60, 110, 50);

        BillingInputPanel.setBackground(new java.awt.Color(255, 255, 255));
        BillingInputPanel.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Bill Id:");
        BillingInputPanel.add(jLabel1);
        jLabel1.setBounds(80, 70, 50, 24);

        ItemBillIdText.setEnabled(false);
        BillingInputPanel.add(ItemBillIdText);
        ItemBillIdText.setBounds(80, 90, 310, 24);

        jLabel2.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Bill Subtotal:");
        BillingInputPanel.add(jLabel2);
        jLabel2.setBounds(80, 270, 80, 24);

        ItemBillSubtotalText.setEnabled(false);
        ItemBillSubtotalText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemBillSubtotalTextActionPerformed(evt);
            }
        });
        ItemBillSubtotalText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ItemBillSubtotalTextKeyReleased(evt);
            }
        });
        BillingInputPanel.add(ItemBillSubtotalText);
        ItemBillSubtotalText.setBounds(80, 290, 310, 24);

        jLabel3.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Customer:");
        BillingInputPanel.add(jLabel3);
        jLabel3.setBounds(80, 120, 70, 24);

        ItemCustomerIdCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ItemCustomerIdCombo.setEnabled(false);
        ItemCustomerIdCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemCustomerIdComboActionPerformed(evt);
            }
        });
        BillingInputPanel.add(ItemCustomerIdCombo);
        ItemCustomerIdCombo.setBounds(80, 140, 310, 26);

        jLabel4.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Receivement Date:");
        BillingInputPanel.add(jLabel4);
        jLabel4.setBounds(80, 170, 110, 24);

        ItemReceivementDayText.setText("01");
        ItemReceivementDayText.setEnabled(false);
        BillingInputPanel.add(ItemReceivementDayText);
        ItemReceivementDayText.setBounds(80, 190, 78, 24);

        ItemReceivementMonthCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        ItemReceivementMonthCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ItemReceivementMonthCombo.setEnabled(false);
        ItemReceivementMonthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemReceivementMonthComboActionPerformed(evt);
            }
        });
        BillingInputPanel.add(ItemReceivementMonthCombo);
        ItemReceivementMonthCombo.setBounds(170, 190, 100, 26);

        ItemReceivementYearText.setText("1900");
        ItemReceivementYearText.setEnabled(false);
        BillingInputPanel.add(ItemReceivementYearText);
        ItemReceivementYearText.setBounds(280, 190, 108, 24);

        jLabel5.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Bill State:");
        BillingInputPanel.add(jLabel5);
        jLabel5.setBounds(80, 220, 70, 24);

        ItemBillStateCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Valid", "Revoked" }));
        ItemBillStateCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ItemBillStateCombo.setEnabled(false);
        BillingInputPanel.add(ItemBillStateCombo);
        ItemBillStateCombo.setBounds(80, 240, 310, 26);

        jLabel6.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Bill Tax (13%):");
        BillingInputPanel.add(jLabel6);
        jLabel6.setBounds(80, 320, 90, 24);

        ItemBillTaxText.setEnabled(false);
        ItemBillTaxText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemBillTaxTextActionPerformed(evt);
            }
        });
        BillingInputPanel.add(ItemBillTaxText);
        ItemBillTaxText.setBounds(80, 340, 310, 24);

        jLabel7.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Bill Total:");
        BillingInputPanel.add(jLabel7);
        jLabel7.setBounds(80, 370, 60, 24);

        ItemBillTotalText.setEnabled(false);
        ItemBillTotalText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemBillTotalTextActionPerformed(evt);
            }
        });
        BillingInputPanel.add(ItemBillTotalText);
        ItemBillTotalText.setBounds(80, 390, 310, 24);

        ItemAcceptButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        ItemAcceptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/aceptar-32.png"))); // NOI18N
        ItemAcceptButton.setText("Accept");
        ItemAcceptButton.setBorder(null);
        ItemAcceptButton.setContentAreaFilled(false);
        ItemAcceptButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ItemAcceptButton.setEnabled(false);
        ItemAcceptButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ItemAcceptButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ItemAcceptButtonMouseExited(evt);
            }
        });
        ItemAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemAcceptButtonActionPerformed(evt);
            }
        });
        BillingInputPanel.add(ItemAcceptButton);
        ItemAcceptButton.setBounds(190, 430, 90, 50);

        jLabel8.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Item Help to Complete:");
        BillingInputPanel.add(jLabel8);
        jLabel8.setBounds(80, 16, 140, 30);

        ItemOptionCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ItemOptionCombo.setEnabled(false);
        ItemOptionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemOptionComboActionPerformed(evt);
            }
        });
        BillingInputPanel.add(ItemOptionCombo);
        ItemOptionCombo.setBounds(80, 40, 310, 26);

        ItemSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/búsqueda-32.png"))); // NOI18N
        ItemSearchButton.setBorder(null);
        ItemSearchButton.setContentAreaFilled(false);
        ItemSearchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ItemSearchButton.setEnabled(false);
        ItemSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ItemSearchButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ItemSearchButtonMouseExited(evt);
            }
        });
        ItemSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSearchButtonActionPerformed(evt);
            }
        });
        BillingInputPanel.add(ItemSearchButton);
        ItemSearchButton.setBounds(20, 30, 50, 50);

        BillingView.add(BillingInputPanel);
        BillingInputPanel.setBounds(100, 160, 390, 560);

        BillingInputPanel1.setBackground(new java.awt.Color(255, 255, 255));
        BillingInputPanel1.setLayout(null);

        MaintenanceBillIdText.setEnabled(false);
        BillingInputPanel1.add(MaintenanceBillIdText);
        MaintenanceBillIdText.setBounds(90, 90, 310, 24);

        jLabel10.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Bill Subtotal:");
        BillingInputPanel1.add(jLabel10);
        jLabel10.setBounds(90, 270, 80, 24);

        MaintenanceBillSubtotalText.setEnabled(false);
        MaintenanceBillSubtotalText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MaintenanceBillSubtotalTextKeyReleased(evt);
            }
        });
        BillingInputPanel1.add(MaintenanceBillSubtotalText);
        MaintenanceBillSubtotalText.setBounds(90, 290, 310, 24);

        jLabel11.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Customer:");
        BillingInputPanel1.add(jLabel11);
        jLabel11.setBounds(90, 120, 70, 24);

        MaintenanceCustomerIdCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MaintenanceCustomerIdCombo.setEnabled(false);
        MaintenanceCustomerIdCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintenanceCustomerIdComboActionPerformed(evt);
            }
        });
        BillingInputPanel1.add(MaintenanceCustomerIdCombo);
        MaintenanceCustomerIdCombo.setBounds(90, 140, 310, 26);

        jLabel12.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Receivement Date:");
        BillingInputPanel1.add(jLabel12);
        jLabel12.setBounds(90, 170, 110, 24);

        MaintenanceReceivementDayText.setText("01");
        MaintenanceReceivementDayText.setEnabled(false);
        BillingInputPanel1.add(MaintenanceReceivementDayText);
        MaintenanceReceivementDayText.setBounds(90, 190, 78, 24);

        MaintenanceReceivementMonthCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        MaintenanceReceivementMonthCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MaintenanceReceivementMonthCombo.setEnabled(false);
        MaintenanceReceivementMonthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintenanceReceivementMonthComboActionPerformed(evt);
            }
        });
        BillingInputPanel1.add(MaintenanceReceivementMonthCombo);
        MaintenanceReceivementMonthCombo.setBounds(180, 190, 100, 26);

        MaintenanceReceivementYearText.setText("1900");
        MaintenanceReceivementYearText.setEnabled(false);
        BillingInputPanel1.add(MaintenanceReceivementYearText);
        MaintenanceReceivementYearText.setBounds(290, 190, 108, 24);

        jLabel13.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Bill State:");
        BillingInputPanel1.add(jLabel13);
        jLabel13.setBounds(90, 220, 70, 24);

        MaintenanceBillStateCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Valid", "Revoked" }));
        MaintenanceBillStateCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MaintenanceBillStateCombo.setEnabled(false);
        BillingInputPanel1.add(MaintenanceBillStateCombo);
        MaintenanceBillStateCombo.setBounds(90, 240, 310, 26);

        jLabel14.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Bill Tax (13%):");
        BillingInputPanel1.add(jLabel14);
        jLabel14.setBounds(90, 320, 90, 24);

        MaintenanceBillTaxText.setEnabled(false);
        MaintenanceBillTaxText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintenanceBillTaxTextActionPerformed(evt);
            }
        });
        BillingInputPanel1.add(MaintenanceBillTaxText);
        MaintenanceBillTaxText.setBounds(90, 340, 310, 24);

        jLabel15.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Bill Total:");
        BillingInputPanel1.add(jLabel15);
        jLabel15.setBounds(90, 370, 60, 24);

        MaintenanceBillTotalText.setEnabled(false);
        MaintenanceBillTotalText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintenanceBillTotalTextActionPerformed(evt);
            }
        });
        BillingInputPanel1.add(MaintenanceBillTotalText);
        MaintenanceBillTotalText.setBounds(90, 390, 310, 24);

        MaintenanceAcceptButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        MaintenanceAcceptButton.setForeground(new java.awt.Color(0, 0, 0));
        MaintenanceAcceptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/aceptar-32.png"))); // NOI18N
        MaintenanceAcceptButton.setText("Accept");
        MaintenanceAcceptButton.setBorder(null);
        MaintenanceAcceptButton.setContentAreaFilled(false);
        MaintenanceAcceptButton.setEnabled(false);
        MaintenanceAcceptButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MaintenanceAcceptButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MaintenanceAcceptButtonMouseExited(evt);
            }
        });
        MaintenanceAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintenanceAcceptButtonActionPerformed(evt);
            }
        });
        BillingInputPanel1.add(MaintenanceAcceptButton);
        MaintenanceAcceptButton.setBounds(210, 430, 90, 50);

        jLabel16.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("Maintenance Help to Complete:");
        BillingInputPanel1.add(jLabel16);
        jLabel16.setBounds(90, 20, 190, 24);

        MaintenanceOptionCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MaintenanceOptionCombo.setEnabled(false);
        MaintenanceOptionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintenanceOptionComboActionPerformed(evt);
            }
        });
        BillingInputPanel1.add(MaintenanceOptionCombo);
        MaintenanceOptionCombo.setBounds(90, 40, 310, 26);

        MaintenanceSearchButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        MaintenanceSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/búsqueda-32.png"))); // NOI18N
        MaintenanceSearchButton.setBorder(null);
        MaintenanceSearchButton.setContentAreaFilled(false);
        MaintenanceSearchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MaintenanceSearchButton.setEnabled(false);
        MaintenanceSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MaintenanceSearchButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MaintenanceSearchButtonMouseExited(evt);
            }
        });
        MaintenanceSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintenanceSearchButtonActionPerformed(evt);
            }
        });
        BillingInputPanel1.add(MaintenanceSearchButton);
        MaintenanceSearchButton.setBounds(30, 30, 50, 50);

        jLabel9.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Bill Id:");
        BillingInputPanel1.add(jLabel9);
        jLabel9.setBounds(90, 70, 40, 20);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Ellipse 2092.png"))); // NOI18N
        jLabel17.setText("jLabel17");
        BillingInputPanel1.add(jLabel17);
        jLabel17.setBounds(240, 360, 433, 270);

        BillingView.add(BillingInputPanel1);
        BillingInputPanel1.setBounds(490, 160, 540, 590);

        BillingWindowTitle1.setFont(new java.awt.Font("Dubai Medium", 1, 18)); // NOI18N
        BillingWindowTitle1.setForeground(new java.awt.Color(0, 0, 0));
        BillingWindowTitle1.setText("Maintenance Billing");
        BillingView.add(BillingWindowTitle1);
        BillingWindowTitle1.setBounds(650, 130, 156, 40);

        BillingCancelButton.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        BillingCancelButton.setForeground(new java.awt.Color(0, 0, 0));
        BillingCancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/cancelar-32.png"))); // NOI18N
        BillingCancelButton.setText("Cancel");
        BillingCancelButton.setBorder(null);
        BillingCancelButton.setContentAreaFilled(false);
        BillingCancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BillingCancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BillingCancelButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BillingCancelButtonMouseExited(evt);
            }
        });
        BillingCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillingCancelButtonActionPerformed(evt);
            }
        });
        BillingView.add(BillingCancelButton);
        BillingCancelButton.setBounds(640, 60, 100, 50);

        BillingWindowTitle2.setFont(new java.awt.Font("Dubai Medium", 1, 18)); // NOI18N
        BillingWindowTitle2.setForeground(new java.awt.Color(0, 0, 0));
        BillingWindowTitle2.setText("Item Billing");
        BillingView.add(BillingWindowTitle2);
        BillingWindowTitle2.setBounds(290, 130, 100, 40);

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Union3.png"))); // NOI18N
        BillingView.add(jLabel18);
        jLabel18.setBounds(-250, -190, 1426, 520);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(BillingView, javax.swing.GroupLayout.PREFERRED_SIZE, 1031, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BillingView, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        borrarPanel(new ScreenProducts());
        ShowJPanel(new ScreenMain());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        // TODO add your handling code here:
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/SalirView2.png")));
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        // TODO add your handling code here:
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/SalirView.png")));
    }//GEN-LAST:event_jButton1MouseExited

    private void ItemCustomerIdComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemCustomerIdComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemCustomerIdComboActionPerformed

    private void ItemBillTaxTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemBillTaxTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemBillTaxTextActionPerformed

    private void ItemBillTotalTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemBillTotalTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemBillTotalTextActionPerformed

    private void BillingAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillingAddButtonActionPerformed
        String[] options = {"Item", "Maintenance"};
        int selection = JOptionPane.showOptionDialog(null, "Choose a Billing Option:", "BILLING", 0, 3, null, options, options[0]);
        switch(selection){
            case 0:
                //Switch Flags
                BillAddFlag = true;
                BillSearchFlag = false;
                BillRevokeFlag = false;
                //ItemFlag = true;
                //MaintenanceFlag = false;
                
                //Disable Functions
                BillingAddButton.setEnabled(false);
                BillingSearchButton.setEnabled(false);
                BillingRevokeButton.setEnabled(false);
                
                //Enable Buttons
                ItemOptionCombo.setEnabled(true);
                ItemCustomerIdCombo.setEnabled(false);
                ItemReceivementDayText.setEnabled(false);
                ItemReceivementMonthCombo.setEnabled(false);
                ItemReceivementYearText.setEnabled(false);
                ItemBillSubtotalText.setEnabled(false);
                ItemBillTaxText.setEnabled(false);
                ItemBillTotalText.setEnabled(false);
                ItemBillStateCombo.setSelectedIndex(0);
                ItemSearchButton.setEnabled(true);
                break;
            
            case 1:
                //Switch Flags
                BillAddFlag = true;
                BillSearchFlag = false;
                BillRevokeFlag = false;
                //ItemFlag = false;
                //MaintenanceFlag = true;
                
                //Disable Functions
                BillingAddButton.setEnabled(false);
                BillingSearchButton.setEnabled(false);
                BillingRevokeButton.setEnabled(false);
                
                //Enable Buttons
                MaintenanceOptionCombo.setEnabled(true);
                MaintenanceCustomerIdCombo.setEnabled(false);
                MaintenanceReceivementDayText.setEnabled(false);
                MaintenanceReceivementMonthCombo.setEnabled(false);
                MaintenanceReceivementYearText.setEnabled(false);
                MaintenanceBillSubtotalText.setEnabled(false);
                MaintenanceBillTaxText.setEnabled(false);
                MaintenanceBillTotalText.setEnabled(false);
                MaintenanceBillStateCombo.setSelectedIndex(0);
                MaintenanceSearchButton.setEnabled(true);
                break;
        }    
    }//GEN-LAST:event_BillingAddButtonActionPerformed

    private void ItemReceivementMonthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemReceivementMonthComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemReceivementMonthComboActionPerformed

    private void BillingSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillingSearchButtonActionPerformed
        //Switch Flags
        BillAddFlag = false;
        BillSearchFlag = true;
        BillRevokeFlag = false;
        
        String[] options = {"Bill Id", "Date", "Customer Name"};
        int selection = JOptionPane.showOptionDialog(null, "Choose a Searching Option:", "SEARCH", 0, 3, null, options, options[0]);
        switch(selection){
            case 0:
                caso = "0";
                ItemBillIdText.setEnabled(true);
                MaintenanceBillIdText.setEnabled(true);
                
                BillingAddButton.setEnabled(false);
                BillingSearchButton.setEnabled(false);
                BillingRevokeButton.setEnabled(false);
                
                ItemAcceptButton.setEnabled(true);
                MaintenanceAcceptButton.setEnabled(true);
                break;
            case 1:
                caso = "1";
                ItemReceivementDayText.setEnabled(true);
                ItemReceivementMonthCombo.setEnabled(true);
                ItemReceivementYearText.setEnabled(true);
                MaintenanceReceivementDayText.setEnabled(true);
                MaintenanceReceivementMonthCombo.setEnabled(true);
                MaintenanceReceivementYearText.setEnabled(true);
                
                BillingAddButton.setEnabled(false);
                BillingSearchButton.setEnabled(false);
                BillingRevokeButton.setEnabled(false);
                
                ItemAcceptButton.setEnabled(true);
                MaintenanceAcceptButton.setEnabled(true);
                break;
            case 2:
                caso = "2";
                ItemCustomerIdCombo.setEnabled(true);
                MaintenanceCustomerIdCombo.setEnabled(true);
                
                BillingAddButton.setEnabled(false);
                BillingSearchButton.setEnabled(false);
                BillingRevokeButton.setEnabled(false);
                
                ItemAcceptButton.setEnabled(true);
                MaintenanceAcceptButton.setEnabled(true);
                break;
        }
    }//GEN-LAST:event_BillingSearchButtonActionPerformed

    private void BillingRevokeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillingRevokeButtonActionPerformed
        //Switch Flags
        BillAddFlag = false;
        BillSearchFlag = false;
        BillRevokeFlag = true;
        ItemBillStateCombo.setSelectedIndex(1);
        MaintenanceBillStateCombo.setSelectedIndex(1);
        
        ItemBillIdText.setEnabled(true);
        MaintenanceBillIdText.setEnabled(true);
        
        ItemAcceptButton.setEnabled(true);
        MaintenanceAcceptButton.setEnabled(true);
        
        BillingAddButton.setEnabled(false);
        BillingSearchButton.setEnabled(false);
        BillingRevokeButton.setEnabled(false);
    }//GEN-LAST:event_BillingRevokeButtonActionPerformed

    private void ItemOptionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemOptionComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemOptionComboActionPerformed

    private void MaintenanceCustomerIdComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintenanceCustomerIdComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaintenanceCustomerIdComboActionPerformed

    private void MaintenanceReceivementMonthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintenanceReceivementMonthComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaintenanceReceivementMonthComboActionPerformed

    private void MaintenanceBillTaxTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintenanceBillTaxTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaintenanceBillTaxTextActionPerformed

    private void MaintenanceBillTotalTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintenanceBillTotalTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaintenanceBillTotalTextActionPerformed

    private void MaintenanceOptionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintenanceOptionComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaintenanceOptionComboActionPerformed

    private void BillingCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillingCancelButtonActionPerformed
        int res = JOptionPane.showConfirmDialog(null, "Are you sure to cancel?");
        if(res == 0){
            //ITEM SIDE RESET
            ItemOptionCombo.setEnabled(false);
            ItemCustomerIdCombo.setEnabled(false);
            ItemReceivementDayText.setEnabled(false);
            ItemReceivementMonthCombo.setEnabled(false);
            ItemReceivementYearText.setEnabled(false);
            ItemBillSubtotalText.setEnabled(false);
            ItemBillTaxText.setEnabled(false);
            ItemBillTotalText.setEnabled(false);
            ItemBillStateCombo.setSelectedIndex(0);
            ItemSearchButton.setEnabled(false);
            ItemAcceptButton.setEnabled(false);
            ItemBillIdText.setEnabled(false);

            ItemOptionCombo.setSelectedIndex(0);
            ItemBillIdText.setText("");
            ItemCustomerIdCombo.setSelectedIndex(0);
            ItemReceivementDayText.setText("");
            ItemReceivementMonthCombo.setSelectedIndex(0);
            ItemReceivementYearText.setText("");
            ItemBillSubtotalText.setText("");
            ItemBillTaxText.setText("");
            ItemBillTotalText.setText("");

            //MAINTENANCE SIDE RESET
            MaintenanceOptionCombo.setEnabled(false);
            MaintenanceCustomerIdCombo.setEnabled(false);
            MaintenanceReceivementDayText.setEnabled(false);
            MaintenanceReceivementMonthCombo.setEnabled(false);
            MaintenanceReceivementYearText.setEnabled(false);
            MaintenanceBillSubtotalText.setEnabled(false);
            MaintenanceBillTaxText.setEnabled(false);
            MaintenanceBillTotalText.setEnabled(false);
            MaintenanceBillStateCombo.setSelectedIndex(0);
            MaintenanceSearchButton.setEnabled(false);
            MaintenanceAcceptButton.setEnabled(false);
            MaintenanceBillIdText.setEnabled(false);

            MaintenanceOptionCombo.setSelectedIndex(0);
            MaintenanceBillIdText.setText("");
            MaintenanceCustomerIdCombo.setSelectedIndex(0);
            MaintenanceReceivementDayText.setText("");
            MaintenanceReceivementMonthCombo.setSelectedIndex(0);
            MaintenanceReceivementYearText.setText("");
            MaintenanceBillSubtotalText.setText("");
            MaintenanceBillTaxText.setText("");
            MaintenanceBillTotalText.setText("");

            //Switch Flags
            BillAddFlag = false;
            BillSearchFlag = false;
            BillRevokeFlag = false;
            caso = "";
            //ItemFlag = false;
            //MaintenanceFlag = false;

            //Enable Functions
            BillingAddButton.setEnabled(true);
            BillingSearchButton.setEnabled(true);
            BillingRevokeButton.setEnabled(true);
        }
    }//GEN-LAST:event_BillingCancelButtonActionPerformed

    private void ItemSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSearchButtonActionPerformed
        // TODO add your handling code here:
        set_id("bill");
        int aux = Integer.parseInt(ItemOptionCombo.getSelectedItem().toString());
        int day = calendar.get(Calendar.DATE);
        int month = calendar.get(Calendar.MONTH);
        int year = calendar.get(Calendar.YEAR);
        for(item_class item:items_list){
            if(item.getId_item() == aux){
                ItemReceivementDayText.setEnabled(true);
                ItemReceivementMonthCombo.setEnabled(true);
                ItemReceivementYearText.setEnabled(true);
                ItemCustomerIdCombo.setEnabled(true);
                ItemBillSubtotalText.setEnabled(true);
                
                
                ItemReceivementDayText.setText(day+"");
                ItemReceivementMonthCombo.setSelectedIndex(month);
                ItemReceivementYearText.setText(year+"");
                
                ItemBillSubtotalText.setText(item.getPrice_item()+"");
                ItemBillTaxText.setText(Math.round(item.getPrice_item()*0.13)+"");
                ItemBillTotalText.setText(item.getPrice_item()+Math.round(item.getPrice_item()*0.13)+"");
                
                ItemAcceptButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_ItemSearchButtonActionPerformed

    private void ItemAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemAcceptButtonActionPerformed
        // TODO add your handling code here:
        if(BillAddFlag == true){
            //Date
            if(ItemReceivementDayText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this field: Receivement Date Day");
                return;
            }
            if(ItemReceivementYearText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this field: Receivement Date Year");
                return;
            }
            boolean valid_date = validateDate(Integer.parseInt(ItemReceivementDayText.getText()), Integer.parseInt(ItemReceivementMonthCombo.getSelectedItem().toString()), Integer.parseInt(ItemReceivementYearText.getText()));
            if(valid_date == false){
                return;
            }
            //Subtotal
            if(ItemBillSubtotalText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this field: Bill Subtotal");
                return;
            }
            if(isNumeric(ItemBillSubtotalText.getText()) == false){
                JOptionPane.showMessageDialog(null, "Bill Subtotal must be numeric");
                return;
            }
            
            //Create the bill
            bill_class temporary_object_item = new bill_class();
            temporary_object_item.setBill_id(Integer.parseInt(ItemBillIdText.getText()));
            temporary_object_item.setCustomer_id(Integer.parseInt(customers_dict.get(ItemCustomerIdCombo.getSelectedItem().toString()).toString()));
            temporary_object_item.setBill_date(new Date((Integer.parseInt(ItemReceivementYearText.getText()) - 1900), (Integer.parseInt(ItemReceivementMonthCombo.getSelectedItem().toString()) - 1), Integer.parseInt(ItemReceivementDayText.getText())));
            temporary_object_item.setBill_state("Valid");
            temporary_object_item.setBill_subtotal(Integer.parseInt(ItemBillSubtotalText.getText()));
            temporary_object_item.setBill_tax(Integer.parseInt(ItemBillTaxText.getText()));
            temporary_object_item.setBill_total(Integer.parseInt(ItemBillTotalText.getText()));
            
            //Add the Bill
            bills_list.add(temporary_object_item);
            WriteCSV();
            add_id("bill");
            
            //Reset Textfields
            ItemOptionCombo.setEnabled(true);
            ItemCustomerIdCombo.setEnabled(false);
            ItemReceivementDayText.setEnabled(false);
            ItemReceivementMonthCombo.setEnabled(false);
            ItemReceivementYearText.setEnabled(false);
            ItemBillSubtotalText.setEnabled(false);
            ItemBillTaxText.setEnabled(false);
            ItemBillTotalText.setEnabled(false);
            ItemBillStateCombo.setSelectedIndex(0);
            ItemSearchButton.setEnabled(true);
            ItemAcceptButton.setEnabled(false);
            
            id_class id = main_class.ids.get(0);
            id.setId_bill(id.getId_bill() + 1);
            JOptionPane.showMessageDialog(null, "Bill added succesfully!");
            
        } else if(BillSearchFlag == true){
            switch(caso){
                case "0":
                    //Bill ID search
                    for(bill_class bill_searched:bills_list){
                        if(Integer.parseInt(ItemBillIdText.getText()) == bill_searched.getBill_id()){
                            String customer = customers_dict2.get(bill_searched.getCustomer_id()).toString();
                            ItemCustomerIdCombo.setSelectedItem(customer);
                            ItemReceivementDayText.setText(bill_searched.getBill_date().getDate()+"");
                            ItemReceivementMonthCombo.setSelectedIndex(bill_searched.getBill_date().getMonth());
                            ItemReceivementYearText.setText((bill_searched.getBill_date().getYear() + 1900)+"");
                            ItemBillStateCombo.setSelectedItem(bill_searched.getBill_state());
                            ItemBillSubtotalText.setText(bill_searched.getBill_subtotal()+"");
                            ItemBillTaxText.setText(bill_searched.getBill_tax()+"");
                            ItemBillTotalText.setText(bill_searched.getBill_total()+"");
                            JOptionPane.showMessageDialog(null, "Bill found!");
                            return;
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Bill not found");
                    break;
                case "1":
                    //Date search
                    Date date_comparison = new Date(Integer.parseInt(ItemReceivementYearText.getText()) - 1900, Integer.parseInt(ItemReceivementMonthCombo.getSelectedItem().toString()) - 1, Integer.parseInt(ItemReceivementDayText.getText()));
                    
                    for(bill_class bill_searched:bills_list){
                        System.out.println(bill_searched.getBill_date());
                        System.out.println(date_comparison);
                        if(bill_searched.getBill_date().equals(date_comparison)){
                            String customer = customers_dict2.get(bill_searched.getCustomer_id()).toString();
                            ItemBillIdText.setText(bill_searched.getBill_id()+"");
                            ItemCustomerIdCombo.setSelectedItem(customer);
                            ItemBillStateCombo.setSelectedItem(bill_searched.getBill_state());
                            ItemBillSubtotalText.setText(bill_searched.getBill_subtotal()+"");
                            ItemBillTaxText.setText(bill_searched.getBill_tax()+"");
                            ItemBillTotalText.setText(bill_searched.getBill_total()+"");
                            JOptionPane.showMessageDialog(null, "Bill found!");
                            return;
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Bill not found");
                    break;
                case "2":
                    //Customer search
                    int CustomerId = Integer.parseInt(customers_dict.get(ItemCustomerIdCombo.getSelectedItem().toString()).toString());
                    for(bill_class bill_searched:bills_list){
                        if(CustomerId == bill_searched.getCustomer_id()){
                            ItemBillIdText.setText(bill_searched.getBill_id()+"");
                            ItemReceivementDayText.setText(bill_searched.getBill_date().getDate()+"");
                            ItemReceivementMonthCombo.setSelectedIndex(bill_searched.getBill_date().getMonth());
                            ItemReceivementYearText.setText((bill_searched.getBill_date().getYear() + 1900)+"");
                            ItemBillStateCombo.setSelectedItem(bill_searched.getBill_state());
                            ItemBillSubtotalText.setText(bill_searched.getBill_subtotal()+"");
                            ItemBillTaxText.setText(bill_searched.getBill_tax()+"");
                            ItemBillTotalText.setText(bill_searched.getBill_total()+"");
                            JOptionPane.showMessageDialog(null, "Bill found!");
                            return;
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Bill not found");
                    break;
            }
        } else if(BillRevokeFlag == true) {
            for(bill_class bill_searched:bills_list){
                if(Integer.parseInt(ItemBillIdText.getText()) == bill_searched.getBill_id()){
                    int pass = JOptionPane.showConfirmDialog(null, "Are you sure to revoke this bill?");
                    if(pass == 0){
                        bill_searched.setBill_state(ItemBillStateCombo.getSelectedItem().toString());
                        WriteCSV();
                        JOptionPane.showMessageDialog(null, "Bill revoked");
                        return;
                    } else {
                        return;
                    }
                }
            }
            JOptionPane.showMessageDialog(null, "Bill not found");
            return;
        }
    }//GEN-LAST:event_ItemAcceptButtonActionPerformed

    private void ItemBillSubtotalTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ItemBillSubtotalTextKeyReleased
        // TODO add your handling code here:
        if(isNumeric(ItemBillSubtotalText.getText())){
            System.out.println(ItemBillSubtotalText.getText());
            //int aux = Integer.parseInt(ItemBillSubtotalText.getText());
            ItemBillTaxText.setText(Math.round(Integer.parseInt(ItemBillSubtotalText.getText())*0.13)+"");
            ItemBillTotalText.setText(Integer.parseInt(ItemBillSubtotalText.getText()) + Math.round(Integer.parseInt(ItemBillSubtotalText.getText())*0.13)+"");
        }
    }//GEN-LAST:event_ItemBillSubtotalTextKeyReleased

    private void MaintenanceSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintenanceSearchButtonActionPerformed
        set_id("bill");
        // TODO add your handling code here:
        int aux = Integer.parseInt(MaintenanceOptionCombo.getSelectedItem().toString());
        int day = calendar.get(Calendar.DATE);
        int month = calendar.get(Calendar.MONTH);
        int year = calendar.get(Calendar.YEAR);
        for(maintenance_class maint:maintenance_list){
            if(maint.getService_id()== aux){
                MaintenanceReceivementDayText.setEnabled(true);
                MaintenanceReceivementMonthCombo.setEnabled(true);
                MaintenanceReceivementYearText.setEnabled(true);
                MaintenanceBillSubtotalText.setEnabled(true);
                
                MaintenanceReceivementDayText.setText(day+"");
                MaintenanceReceivementMonthCombo.setSelectedIndex(month);
                MaintenanceReceivementYearText.setText(year+"");
                
                //Selected Item
                MaintenanceCustomerIdCombo.setSelectedItem(String.valueOf(maint.getCustomer_id().split("-")[1]));
                
                MaintenanceBillSubtotalText.setText(maint.getMaintenance_price()+"");
                MaintenanceBillTaxText.setText(Math.round(maint.getMaintenance_price()*0.13)+"");
                MaintenanceBillTotalText.setText(maint.getMaintenance_price()+Math.round(maint.getMaintenance_price()*0.13)+"");
                
                MaintenanceAcceptButton.setEnabled(true);
                return;
            }
        }
    }//GEN-LAST:event_MaintenanceSearchButtonActionPerformed

    private void ItemBillSubtotalTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemBillSubtotalTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemBillSubtotalTextActionPerformed

    private void MaintenanceBillSubtotalTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MaintenanceBillSubtotalTextKeyReleased
        // TODO add your handling code here:
        if(isNumeric(MaintenanceBillSubtotalText.getText())){
            System.out.println(MaintenanceBillSubtotalText.getText());
            //int aux = Integer.parseInt(ItemBillSubtotalText.getText());
            MaintenanceBillTaxText.setText(Math.round(Integer.parseInt(MaintenanceBillSubtotalText.getText())*0.13)+"");
            MaintenanceBillTotalText.setText(Integer.parseInt(MaintenanceBillSubtotalText.getText()) + Math.round(Integer.parseInt(MaintenanceBillSubtotalText.getText())*0.13)+"");
        }
    }//GEN-LAST:event_MaintenanceBillSubtotalTextKeyReleased

    private void MaintenanceAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintenanceAcceptButtonActionPerformed
        // TODO add your handling code here:
        if(BillAddFlag == true){
            //Date
            if(MaintenanceReceivementDayText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this field: Receivement Date Day");
                return;
            }
            if(MaintenanceReceivementYearText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this field: Receivement Date Year");
                return;
            }
            boolean valid_date = validateDate(Integer.parseInt(MaintenanceReceivementDayText.getText()), Integer.parseInt(MaintenanceReceivementMonthCombo.getSelectedItem().toString()), Integer.parseInt(MaintenanceReceivementYearText.getText()));
            if(valid_date == false){
                return;
            }
            //Subtotal
            if(MaintenanceBillSubtotalText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "You need to complete this field: Bill Subtotal");
                return;
            }
            if(isNumeric(MaintenanceBillSubtotalText.getText()) == false){
                JOptionPane.showMessageDialog(null, "Bill Subtotal must be numeric");
                return;
            }
            
            //Create the bill
            bill_class temporary_object_maintenance = new bill_class();
            System.out.println(MaintenanceBillIdText.getText());
            temporary_object_maintenance.setBill_id(Integer.parseInt(MaintenanceBillIdText.getText()));
            temporary_object_maintenance.setCustomer_id(Integer.parseInt(customers_dict.get(MaintenanceCustomerIdCombo.getSelectedItem().toString()).toString()));
            temporary_object_maintenance.setBill_date(new Date((Integer.parseInt(MaintenanceReceivementYearText.getText()) - 1900), (Integer.parseInt(MaintenanceReceivementMonthCombo.getSelectedItem().toString()) - 1), Integer.parseInt(MaintenanceReceivementDayText.getText())));
            temporary_object_maintenance.setBill_state("Valid");
            temporary_object_maintenance.setBill_subtotal(Integer.parseInt(MaintenanceBillSubtotalText.getText()));
            temporary_object_maintenance.setBill_tax(Integer.parseInt(MaintenanceBillTaxText.getText()));
            temporary_object_maintenance.setBill_total(Integer.parseInt(MaintenanceBillTotalText.getText()));
            
            //Add the Bill
            bills_list.add(temporary_object_maintenance);
            WriteCSV();
            add_id("bill");
            
            //Reset Textfields
            MaintenanceOptionCombo.setEnabled(true);
            MaintenanceCustomerIdCombo.setEnabled(false);
            MaintenanceReceivementDayText.setEnabled(false);
            MaintenanceReceivementMonthCombo.setEnabled(false);
            MaintenanceReceivementYearText.setEnabled(false);
            MaintenanceBillSubtotalText.setEnabled(false);
            MaintenanceBillTaxText.setEnabled(false);
            MaintenanceBillTotalText.setEnabled(false);
            MaintenanceBillStateCombo.setSelectedIndex(0);
            MaintenanceSearchButton.setEnabled(true);
            MaintenanceAcceptButton.setEnabled(false);
            
            id_class id = main_class.ids.get(0);
            id.setId_bill(id.getId_bill() + 1);
            JOptionPane.showMessageDialog(null, "Bill added succesfully!");
            
        } else if(BillSearchFlag == true){
            switch(caso){
                case "0":
                    //Bill ID search
                    for(bill_class bill_searched:bills_list){
                        if(Integer.parseInt(MaintenanceBillIdText.getText()) == bill_searched.getBill_id()){
                            String customer = customers_dict2.get(bill_searched.getCustomer_id()).toString();
                            MaintenanceCustomerIdCombo.setSelectedItem(customer);
                            MaintenanceReceivementDayText.setText(bill_searched.getBill_date().getDate()+"");
                            MaintenanceReceivementMonthCombo.setSelectedIndex(bill_searched.getBill_date().getMonth());
                            MaintenanceReceivementYearText.setText((bill_searched.getBill_date().getYear() + 1900)+"");
                            MaintenanceBillStateCombo.setSelectedItem(bill_searched.getBill_state());
                            MaintenanceBillSubtotalText.setText(bill_searched.getBill_subtotal()+"");
                            MaintenanceBillTaxText.setText(bill_searched.getBill_tax()+"");
                            MaintenanceBillTotalText.setText(bill_searched.getBill_total()+"");
                            JOptionPane.showMessageDialog(null, "Bill found!");
                            return;
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Bill not found");
                    break;
                case "1":
                    //Date search
                    Date date_comparison = new Date(Integer.parseInt(MaintenanceReceivementYearText.getText()) - 1900, Integer.parseInt(MaintenanceReceivementMonthCombo.getSelectedItem().toString()) - 1, Integer.parseInt(MaintenanceReceivementDayText.getText()));
                    
                    for(bill_class bill_searched:bills_list){
                        System.out.println(bill_searched.getBill_date());
                        System.out.println(date_comparison);
                        if(bill_searched.getBill_date().equals(date_comparison)){
                            String customer = customers_dict2.get(bill_searched.getCustomer_id()).toString();
                            MaintenanceBillIdText.setText(bill_searched.getBill_id()+"");
                            MaintenanceCustomerIdCombo.setSelectedItem(customer);
                            MaintenanceBillStateCombo.setSelectedItem(bill_searched.getBill_state());
                            MaintenanceBillSubtotalText.setText(bill_searched.getBill_subtotal()+"");
                            MaintenanceBillTaxText.setText(bill_searched.getBill_tax()+"");
                            MaintenanceBillTotalText.setText(bill_searched.getBill_total()+"");
                            JOptionPane.showMessageDialog(null, "Bill found!");
                            return;
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Bill not found");
                    break;
                case "2":
                    //Customer search
                    int CustomerId = Integer.parseInt(customers_dict.get(MaintenanceCustomerIdCombo.getSelectedItem().toString()).toString());
                    for(bill_class bill_searched:bills_list){
                        if(CustomerId == bill_searched.getCustomer_id()){
                            MaintenanceBillIdText.setText(bill_searched.getBill_id()+"");
                            MaintenanceReceivementDayText.setText(bill_searched.getBill_date().getDate()+"");
                            MaintenanceReceivementMonthCombo.setSelectedIndex(bill_searched.getBill_date().getMonth());
                            MaintenanceReceivementYearText.setText((bill_searched.getBill_date().getYear() + 1900)+"");
                            MaintenanceBillStateCombo.setSelectedItem(bill_searched.getBill_state());
                            MaintenanceBillSubtotalText.setText(bill_searched.getBill_subtotal()+"");
                            MaintenanceBillTaxText.setText(bill_searched.getBill_tax()+"");
                            MaintenanceBillTotalText.setText(bill_searched.getBill_total()+"");
                            JOptionPane.showMessageDialog(null, "Bill found!");
                            return;
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Bill not found");
                    break;
            }
        } else if(BillRevokeFlag == true) {
            for(bill_class bill_searched:bills_list){
                if(Integer.parseInt(MaintenanceBillIdText.getText()) == bill_searched.getBill_id()){
                    int pass = JOptionPane.showConfirmDialog(null, "Are you sure to revoke this bill?");
                    if(pass == 0){
                        bill_searched.setBill_state(MaintenanceBillStateCombo.getSelectedItem().toString());
                        WriteCSV();
                        JOptionPane.showMessageDialog(null, "Bill revoked");
                        return;
                    } else {
                        return;
                    }
                }
            }
            JOptionPane.showMessageDialog(null, "Bill not found");
            return;
        }
    }//GEN-LAST:event_MaintenanceAcceptButtonActionPerformed

    private void BillingCancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillingCancelButtonMouseEntered
        if (BillingCancelButton.isEnabled()) {
        BillingCancelButton.setForeground(Color.GRAY);
        BillingCancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/cancelar-42GIF.gif")));
       }
    }//GEN-LAST:event_BillingCancelButtonMouseEntered

    private void BillingCancelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillingCancelButtonMouseExited
        if (BillingCancelButton.isEnabled()) {
       BillingCancelButton.setForeground(Color.black);
       BillingCancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/cancelar-32.png")));
       }
    }//GEN-LAST:event_BillingCancelButtonMouseExited

    private void BillingRevokeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillingRevokeButtonMouseEntered
       BillingRevokeButton.setForeground(Color.GRAY);
       BillingRevokeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/eliminar-mantenimiento-42.png")));
    }//GEN-LAST:event_BillingRevokeButtonMouseEntered

    private void BillingRevokeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillingRevokeButtonMouseExited
       BillingRevokeButton.setForeground(Color.black);
       BillingRevokeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/eliminar-mantenimiento-32.png")));
    }//GEN-LAST:event_BillingRevokeButtonMouseExited

    private void BillingSearchButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillingSearchButtonMouseExited
       BillingSearchButton.setForeground(Color.black);
       BillingSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/buscar-mantenimiento-32.png")));
    }//GEN-LAST:event_BillingSearchButtonMouseExited

    private void BillingSearchButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillingSearchButtonMouseEntered
       BillingSearchButton.setForeground(Color.GRAY);
       BillingSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/buscar-mantenimiento-42.png")));
    }//GEN-LAST:event_BillingSearchButtonMouseEntered

    private void BillingAddButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillingAddButtonMouseEntered
       BillingAddButton.setForeground(Color.GRAY);
       BillingAddButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/agregar-factura-42.png")));
    }//GEN-LAST:event_BillingAddButtonMouseEntered

    private void BillingAddButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillingAddButtonMouseExited
       BillingAddButton.setForeground(Color.black);
       BillingAddButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/agregar-factura-32.png")));
    }//GEN-LAST:event_BillingAddButtonMouseExited

    private void ItemSearchButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemSearchButtonMouseEntered
        ItemSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/búsqueda-42.png")));
    }//GEN-LAST:event_ItemSearchButtonMouseEntered

    private void ItemSearchButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemSearchButtonMouseExited
        ItemSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/búsqueda-32.png")));
    }//GEN-LAST:event_ItemSearchButtonMouseExited

    private void MaintenanceSearchButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MaintenanceSearchButtonMouseEntered
        MaintenanceSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/búsqueda-42.png")));
    }//GEN-LAST:event_MaintenanceSearchButtonMouseEntered

    private void MaintenanceSearchButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MaintenanceSearchButtonMouseExited
        MaintenanceSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/búsqueda-32.png")));
    }//GEN-LAST:event_MaintenanceSearchButtonMouseExited

    private void MaintenanceAcceptButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MaintenanceAcceptButtonMouseEntered
        if (MaintenanceAcceptButton.isEnabled()) {
        MaintenanceAcceptButton.setForeground(Color.GRAY);
        MaintenanceAcceptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Aceptar-42GIF.gif")));
       }
    }//GEN-LAST:event_MaintenanceAcceptButtonMouseEntered

    private void MaintenanceAcceptButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MaintenanceAcceptButtonMouseExited
       if (MaintenanceAcceptButton.isEnabled()) {
       MaintenanceAcceptButton.setForeground(Color.black);
       MaintenanceAcceptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/aceptar-32.png")));
       }
    }//GEN-LAST:event_MaintenanceAcceptButtonMouseExited

    private void ItemAcceptButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemAcceptButtonMouseEntered
        if (ItemAcceptButton.isEnabled()) {
        ItemAcceptButton.setForeground(Color.GRAY);
        ItemAcceptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Aceptar-42GIF.gif")));
       }
    }//GEN-LAST:event_ItemAcceptButtonMouseEntered

    private void ItemAcceptButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemAcceptButtonMouseExited
       if (ItemAcceptButton.isEnabled()) {
       ItemAcceptButton.setForeground(Color.black);
       ItemAcceptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/aceptar-32.png")));
       }
    }//GEN-LAST:event_ItemAcceptButtonMouseExited
    
    /**
    * This function is used to check if the input is a numeric String.
    * @author josem
    */
    private static boolean isNumeric(String cadena){
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe){
            return false;
        }
    }
    
    /**
    * Carga en el archivo id's un id nuevo,sumandole 1 al respectivo que se uso.
    * @author jonns
    * @param id_mode ayuda a identificar cual id incrementar.
    */
    private void add_id(String id_mode){
        String archive = Paths.get("src", "DataBase", "ID's.csv").toString();
        FileWriter fw = null;
        PrintWriter pw = null;
        try{ 
            fw = new FileWriter(archive);
            pw = new PrintWriter(fw);
            for (id_class i : main_class.ids) {
            String line = null;

            if (id_mode.equals("bill")) {
                 line = i.getId_product() + "," + i.getId_item() + "," + i.getId_customer() + "," + i.getId_maintenance() + "," + (i.getId_bill() + 1) + "," + i.getId_detail();
            }
            pw.println(line);
            }
            
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally{
            try{
                if(fw != null){
                    fw.close();
            }
            }catch(Exception ex){
                    ex.printStackTrace();
            }      
        }
    }
    
    /**
    * Hace un set al textfiel correspondiente con su nuevo id.
    * @author jonns
    * @param id_mode identifica cual es el id a incrementar.
    */
    private void set_id(String id_mode){
        id_class id = main_class.ids.get(0);
        if(id_mode.equals("bill")){
           ItemBillIdText.setText(id.getId_bill()+"");
           MaintenanceBillIdText.setText(id.getId_bill()+"");
        }
    }
                                                  
    private static void borrarPanel(JPanel panel) {
        panel.removeAll();
        panel.revalidate();
        panel.repaint();
    }
    private void ShowJPanel(JPanel p){

        p.setSize(1030,750);
        p.setLocation(0,0);
        BillingView.removeAll();
        BillingView.add(p, BorderLayout.CENTER);
        BillingView.revalidate();
        BillingView.repaint();
    }
    
    private int MonthInt(String string){
        int res = 0;
        switch(string){
            case "Jan":
                res = 0;
                break;
            case "Feb":
                res = 1;
                break;
            case "Mar":
                res = 2;
                break;
            case "Apr":
                res = 3;
                break;
            case "May":
                res = 4;
                break;
            case "Jun":
                res = 5;
                break;
            case "Jul":
                res = 6;
                break;
            case "Aug":
                res = 7;
                break;
            case "Sep":
                res = 8;
                break;
            case "Oct":
                res = 9;
                break;
            case "Nov":
                res = 10;
                break;
            case "Dec":
                res = 11;
                break;
        }
        return res;
    }
    
    /**
    * This function is used to validate any date.
    * @author josem
    * @param day The date day
    * @param month The date month
    * @param year The date year
    * @return True if is validated correctly, else False
    */
    private static boolean validateDate(int day, int month, int year){
        boolean pass_flag = false;
        switch(month){
            case 1:if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }

            case 2:if(year%100 == 0){ //Secular year
                if(year%400 == 0){ //Bisiest year
                    if(day<1 || day>29){
                        JOptionPane.showMessageDialog(null, "You need to put a valid date");
                        pass_flag = false;
                        break;
                    }else{
                        pass_flag = true;
                        break;
                    }
                }else{
                    if(day<1 || day>28){
                        JOptionPane.showMessageDialog(null, "You need to put a valid date");
                        pass_flag = false;
                        break;
                    }else{
                        pass_flag = true;
                        break;
                    } 
                }
            }else{
                if(year%4 == 0){
                    if(day<1 || day>29){
                        JOptionPane.showMessageDialog(null, "You need to put a valid date");
                        pass_flag = false;
                        break;
                    }else{
                        pass_flag = true;
                        break;
                    }
                }else{
                    if(day<1 || day>28){
                        JOptionPane.showMessageDialog(null, "You need to put a valid date");
                        pass_flag = false;
                        break;
                    }else{
                        pass_flag = true;
                        break;
                    }
                }
            }

            case 3: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 4: if(day<1 || day>30){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 5: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 6: if(day<1 || day>30){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 7: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 8: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 9: if(day<1 || day>30){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 10: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 11: if(day<1 || day>30){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
            
            case 12: if(day<1 || day>31){
                JOptionPane.showMessageDialog(null, "You need to put a valid date");
                pass_flag = false;
                break;
            }else{
                pass_flag = true;
                break;
            }
        }
        if(year<1900 || year>2023){
            JOptionPane.showMessageDialog(null, "You need to put a valid date");
            pass_flag = false;
        }
        return pass_flag;
    }
    
    private void ReadCustomers(){
        String archive = Paths.get("src", "DataBase", "Archivo_CSV_Customers.csv").toString();
        try {
            reader = new BufferedReader(new FileReader(archive));
            while((line = reader.readLine()) != null){
                customer_class temporary_object = new customer_class();
                parts = line.split(",");
                int aux_day = 0;
                int aux_month = 0;
                int aux_year = 0;
                Date birthdate = null;
                for(int i = 0; i < parts.length; i++){
                    switch(i){
                        case 0:
                            temporary_object.setCustomer_id(Integer.parseInt(parts[i]));
                            break;
                        case 1:
                            temporary_object.setCustomer_name(parts[i]);
                            break;
                        case 2:
                            temporary_object.setCustomer_lastname(parts[i]);
                            break;
                        case 3:
                            temporary_object.setCustomer_phone(Integer.parseInt(parts[i]));
                            break;
                        case 4:
                            temporary_object.setCustomer_email(parts[i]);
                            break;
                        case 5:
                            temporary_object.setCustomer_province(parts[i]);
                            break;
                        case 6:
                            temporary_object.setCustomer_canton(parts[i]);
                            break;
                        case 7:
                            temporary_object.setCustomer_district(parts[i]);
                            break;
                        case 8:
                            aux_day = Integer.parseInt(parts[i]);
                            break;
                        case 9:
                            aux_month = Integer.parseInt(parts[i]);
                            break;
                        case 10:
                            aux_year = Integer.parseInt(parts[i]);
                            temporary_object.setCustomer_birthdate(new Date(aux_year-1900, aux_month-1, aux_day));
                            break;
                    }
                }
                customers_list.add(temporary_object);
            }
            reader.close();
            line = null;
            parts = null;
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void ReadItems(){
        String archive = Paths.get("src", "DataBase", "Archivo_CSV_ITEMS.csv").toString();
        try {
            reader = new BufferedReader(new FileReader(archive));
            while((line = reader.readLine()) != null){
                item_class temporary_object = new item_class();
                parts = line.split(",");
                for(int i = 0; i < parts.length; i++){
                    switch(i){
                        case 0:
                            temporary_object.setId_item(Integer.parseInt(parts[i]));
                            break;
                        case 1:
                            temporary_object.setCategory_item(parts[i]);
                            break;
                        case 2:
                            temporary_object.setName_item(parts[i]);
                            break;
                        case 3:
                            temporary_object.setType_item(parts[i]);
                            break;
                        case 4:
                            temporary_object.setSize_item(Double.parseDouble(parts[i]));
                            break;
                        case 5:
                            temporary_object.setBrand_item(parts[i]);
                            break;
                        case 6:
                            temporary_object.setPrice_item(Integer.parseInt(parts[i]));
                            break;
                        case 7:
                            temporary_object.setAmount_item(Integer.parseInt(parts[i]));
                            break;
                    }
                }
                items_list.add(temporary_object);
            }
            reader.close();
            line = null;
            parts = null;
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void ReadMaintenance(){
        String archive = Paths.get("src", "DataBase", "Archivo_CSV_MAINTENANCE.csv").toString();
        try {
            reader = new BufferedReader(new FileReader(archive));
            while((line = reader.readLine()) != null){
                maintenance_class temporary_object = new maintenance_class();
                parts = line.split(",");
                int aux_day = 0;
                int aux_month = 0;
                int aux_year = 0;
                String aux1;
                for(int i = 0; i < parts.length; i++){
                    switch(i){
                        case 0:
                            temporary_object.setService_id(Integer.parseInt(parts[i]));
                            break;
                        case 1:
                            temporary_object.setCustomer_id(parts[i]);
                            break;
                        case 2:
                            temporary_object.setBicycle_brand(parts[i]);
                            break;
                        case 3:
                            temporary_object.setBicycle_description(parts[i]);
                            break;
                        case 4:
                            temporary_object.setMaintenance_price(Integer.parseInt(parts[i]));
                            break;
                        case 5:
                            //day
                            aux1 = parts[i].charAt(8) + "" + parts[i].charAt(9);
                            aux_day = Integer.parseInt(aux1);
                            System.out.println(aux_day);
                            
                            //month
                            aux1 = parts[i].charAt(4) + "" + parts[i].charAt(5) + parts[i].charAt(6);
                            aux_month = MonthInt(aux1);
                            System.out.println(aux_month);
                            
                            //year
                            aux1 = parts[i].charAt(24) + "" + parts[i].charAt(25) + parts[i].charAt(26) + parts[i].charAt(27);
                            aux_year = (Integer.parseInt(aux1)-1900);
                            
                            temporary_object.setReceived_date(new Date(aux_year, aux_month, aux_day));
                            break;
                        case 6:
                            //day
                            aux1 = parts[i].charAt(8) + "" + parts[i].charAt(9);
                            aux_day = Integer.parseInt(aux1);
                            System.out.println(aux_day);
                            
                            //month
                            aux1 = parts[i].charAt(4) + "" + parts[i].charAt(5) + parts[i].charAt(6);
                            aux_month = MonthInt(aux1);
                            System.out.println(aux_month);
                            
                            //year
                            aux1 = parts[i].charAt(24) + "" + parts[i].charAt(25) + parts[i].charAt(26) + parts[i].charAt(27);
                            aux_year = (Integer.parseInt(aux1)-1900);
                            
                            temporary_object.setDelivery_date(new Date(aux_year, aux_month, aux_day));
                            break;
                        case 7:
                            temporary_object.setMaintenance_observations(parts[i]);
                            break;
                        case 8:
                            temporary_object.setMaintenance_state(parts[i]);
                            break;
                    }
                }
                if(temporary_object.getMaintenance_state().equals("Close")){
                    maintenance_list.add(temporary_object);
                }
            }
            reader.close();
            line = null;
            parts = null;
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void createIdsItems(){
        int aux = 0;
        for(item_class item:items_list){
            System.out.println(item.getId_item());
            ComboItemsModel.insertElementAt(item.getId_item(), aux);
            ComboItemsModel.setSelectedItem(item.getId_item());
        }
        ItemOptionCombo.setModel(ComboItemsModel);
        ItemOptionCombo.updateUI();
    }
    
    private void createIdsMaintenance(){
        int aux = 0;
        for(maintenance_class item:maintenance_list){
            System.out.println(item.getService_id()+""+item.getReceived_date());
            ComboMaintenanceModel.insertElementAt(item.getService_id(), aux);
            ComboMaintenanceModel.setSelectedItem(item.getService_id());
        }
        MaintenanceOptionCombo.setModel(ComboMaintenanceModel);
        MaintenanceOptionCombo.updateUI();
    }
    
    private void createIdsCustomers(){
        int aux = 0;
        for(customer_class item:customers_list){
            System.out.println(item.getCustomer_id());
            ComboCustomersModel.insertElementAt(item.getCustomer_name(), aux);
            ComboCustomersModel.setSelectedItem(item.getCustomer_name());
            
            customers_dict.put(item.getCustomer_name(), item.getCustomer_id());
            customers_dict2.put(item.getCustomer_id(), item.getCustomer_name());
        }
        ItemCustomerIdCombo.setModel(ComboCustomersModel);
        MaintenanceCustomerIdCombo.setModel(ComboCustomersModel);
        ItemCustomerIdCombo.updateUI();
        MaintenanceCustomerIdCombo.updateUI();
        System.out.println(customers_dict);
    }
    
    //Create Flags
    Boolean BillAddFlag = false;
    Boolean BillSearchFlag = false;
    Boolean BillRevokeFlag = false;
    String caso = "";
    //Boolean ItemFlag = false;
    //Boolean MaintenanceFlag = false;
    
    //Read CSV
    private BufferedReader reader;
    private String line;
    private String parts[] = null;
    
    //Create the Comboboxes models
    DefaultComboBoxModel ComboItemsModel = new DefaultComboBoxModel();   
    DefaultComboBoxModel ComboMaintenanceModel = new DefaultComboBoxModel();
    DefaultComboBoxModel ComboCustomersModel = new DefaultComboBoxModel();
    
    //Create Lists
    ArrayList<customer_class> customers_list = new ArrayList<>();
    ArrayList<item_class> items_list = new ArrayList<>();
    ArrayList<maintenance_class> maintenance_list = new ArrayList<>();
    ArrayList<bill_class> bills_list = new ArrayList<>();
    Dictionary customers_dict = new Hashtable ();
    Dictionary customers_dict2 = new Hashtable ();
    Calendar calendar = new GregorianCalendar();
    
    private void initializeBilling(){
        String archive = Paths.get("src", "DataBase", "Archivo_CSV_Bills.csv").toString();
        try {
            reader = new BufferedReader(new FileReader(archive));
            while((line = reader.readLine()) != null){
                bill_class temporary_object = new bill_class();
                parts = line.split(",");
                int day = 0;
                int month = 0;
                int year = 0;
                Date date = null;
                for(int i = 0; i < parts.length; i++){
                    switch(i){
                        case 0:
                            temporary_object.setBill_id(Integer.parseInt(parts[i]));
                            break;
                        case 1:
                            temporary_object.setCustomer_id(Integer.parseInt(parts[i]));
                            break;
                        case 2:
                            day = Integer.parseInt(parts[i]);
                            break;
                        case 3:
                            month = Integer.parseInt(parts[i]) - 1;
                            break;
                        case 4:
                            year = Integer.parseInt(parts[i]) - 1900;
                            date = new Date(year, month, day);
                            temporary_object.setBill_date(date);
                            break;
                        case 5:
                            temporary_object.setBill_state(parts[i]);
                            break;
                        case 6:
                            temporary_object.setBill_subtotal(Integer.parseInt(parts[i]));
                            break;
                        case 7:
                            temporary_object.setBill_tax(Integer.parseInt(parts[i]));
                            break;
                        case 8:
                            temporary_object.setBill_total(Integer.parseInt(parts[i]));
                            break;
                    }
                }
                bills_list.add(temporary_object);
            }
            reader.close();
            line = null;
            parts = null;
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    /**
    * This function is used to write the CSV file with the new informnation.
    * @author josem
    */
    private void WriteCSV(){
        String archive = Paths.get("src", "DataBase", "Archivo_CSV_Bills.csv").toString();
        FileWriter fw = null;
        PrintWriter pw = null;
        
        try{ 
            fw = new FileWriter(archive);
            pw = new PrintWriter(fw);
            for(bill_class i: bills_list){
                Date original_date = i.getBill_date();
                String date_off = original_date.getDate()+","+(original_date.getMonth()+1)+","+(original_date.getYear()+1900);
                String line = i.getBill_id() + "," + i.getCustomer_id()+","+date_off+","+i.getBill_state()+","+i.getBill_subtotal()+","+i.getBill_tax()+","+i.getBill_total();
                pw.println(line);
            }
            
        }catch (Exception ex) {
            ex.printStackTrace();
        }
        finally{
            try{
                if(fw != null){
                    fw.close();
                }
            }catch(Exception ex){
                    ex.printStackTrace();
            }      
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BillingAddButton;
    private javax.swing.JButton BillingCancelButton;
    private javax.swing.JPanel BillingInputPanel;
    private javax.swing.JPanel BillingInputPanel1;
    private javax.swing.JButton BillingRevokeButton;
    private javax.swing.JButton BillingSearchButton;
    private javax.swing.JPanel BillingView;
    private javax.swing.JLabel BillingWindowSubtitle;
    private javax.swing.JLabel BillingWindowTitle;
    private javax.swing.JLabel BillingWindowTitle1;
    private javax.swing.JLabel BillingWindowTitle2;
    private javax.swing.JButton ItemAcceptButton;
    private javax.swing.JTextField ItemBillIdText;
    private javax.swing.JComboBox<String> ItemBillStateCombo;
    private javax.swing.JTextField ItemBillSubtotalText;
    private javax.swing.JTextField ItemBillTaxText;
    private javax.swing.JTextField ItemBillTotalText;
    private javax.swing.JComboBox<String> ItemCustomerIdCombo;
    private javax.swing.JComboBox<String> ItemOptionCombo;
    private javax.swing.JTextField ItemReceivementDayText;
    private javax.swing.JComboBox<String> ItemReceivementMonthCombo;
    private javax.swing.JTextField ItemReceivementYearText;
    private javax.swing.JButton ItemSearchButton;
    private javax.swing.JButton MaintenanceAcceptButton;
    private javax.swing.JTextField MaintenanceBillIdText;
    private javax.swing.JComboBox<String> MaintenanceBillStateCombo;
    private javax.swing.JTextField MaintenanceBillSubtotalText;
    private javax.swing.JTextField MaintenanceBillTaxText;
    private javax.swing.JTextField MaintenanceBillTotalText;
    private javax.swing.JComboBox<String> MaintenanceCustomerIdCombo;
    private javax.swing.JComboBox<String> MaintenanceOptionCombo;
    private javax.swing.JTextField MaintenanceReceivementDayText;
    private javax.swing.JComboBox<String> MaintenanceReceivementMonthCombo;
    private javax.swing.JTextField MaintenanceReceivementYearText;
    private javax.swing.JButton MaintenanceSearchButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
